[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Les statistiques avec R",
    "section": "",
    "text": "Préface\nCeci est un livre Quarto.\nPour en apprendre davantage sur Quarto, visitez https://quarto.org/docs/books.",
    "crumbs": [
      "Préface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "4  Introduction",
    "section": "",
    "text": "4.1 Air Quality\nFigure 4.1 further explores the impact of temperature on ozone level.\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\nFigure 4.1: Temperature and ozone level.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "intro.html#matplotlib",
    "href": "intro.html#matplotlib",
    "title": "1  Introduction",
    "section": "1.2 Matplotlib",
    "text": "1.2 Matplotlib\n\nimport matplotlib.pyplot as plt\n\nfig = plt.figure()\nx = np.arange(10)\ny = 2.5 * np.sin(x / 20 * np.pi)\nyerr = np.linspace(0.05, 0.2, 10)\n\nplt.errorbar(x, y + 3, yerr=yerr, label='both limits (default)')\nplt.errorbar(x, y + 2, yerr=yerr, uplims=True, label='uplims=True')\nplt.errorbar(x, y + 1, yerr=yerr, uplims=True, lolims=True,\n             label='uplims=True, lolims=True')\n\nupperlimits = [True, False] * 5\nlowerlimits = [False, True] * 5\nplt.errorbar(x, y, yerr=yerr, uplims=upperlimits, lolims=lowerlimits,\n             label='subsets of uplims and lolims')\n\nplt.legend(loc='lower right')\nplt.show(fig)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#plotly",
    "href": "intro.html#plotly",
    "title": "1  Introduction",
    "section": "1.3 Plotly",
    "text": "1.3 Plotly\n\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n\n                                                \n\n\n\n\n\n\nKnuth, Donald E. 1984. « Literate Programming ». Comput. J. 27 (2): 97‑111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#air-quality",
    "href": "intro.html#air-quality",
    "title": "4  Introduction",
    "section": "",
    "text": "Knuth, Donald E. 1984. « Literate Programming ». Comput. J. 27 (2): 97‑111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "mesures_tendance_centrale.html",
    "href": "mesures_tendance_centrale.html",
    "title": "4  Les mesures de tendance centrale",
    "section": "",
    "text": "4.1 Le mode\nLe mode est la modalité, valeur ou classe possédant la plus grande fréquence. En d’autres mots, c’est la donnée la plus fréquente.\nPuisque le mode se préoccupe seulement de la donnée la plus fréquente, il n’est pas influencé par les valeurs extrêmes.\nLorsque le mode est une classe, il est appelé classe modale.\nLe mode est noté Mo.\nLe langage R ne possède pas de fonction permettant de calculer le mode. La façon la plus simple de le calculer est d’utiliser la fonction table de R.\nPar exemple, si nous voulons connaître le mode de la variable marital de la base de données gss_cat:\ntable(gss_cat$marital)\n#&gt; \n#&gt;     No answer Never married     Separated      Divorced       Widowed \n#&gt;            17          5416           743          3383          1807 \n#&gt;       Married \n#&gt;         10117\nNous remarquons que le maximum est à la modalité Married avec une fréquence de 10117.\nSi nous nous intéressons au mode d’une variable quantitative discrète comme age de la base de données gss_cat nous obtenons:\ntable(gss_cat$age)\n#&gt; \n#&gt;  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37 \n#&gt;  91 249 251 278 298 361 344 396 400 385 387 376 433 407 445 425 425 417 428 438 \n#&gt;  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57 \n#&gt; 426 415 452 434 405 448 432 404 422 435 424 417 430 390 400 396 387 365 384 321 \n#&gt;  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77 \n#&gt; 326 323 338 307 310 292 253 259 231 271 205 201 213 206 189 152 180 179 171 137 \n#&gt;  78  79  80  81  82  83  84  85  86  87  88  89 \n#&gt; 150 135 127 119 105  99 100  75  74  54  57 148\nNous remarquons que le maximum est à la valeur 40 avec une fréquence de 452.\nDans le cas d’une variable quantitative continue, pour calculer le mode, il faut commencer par séparer les données en classes. Nous utiliserons les mêmes classes utilisées à la section:\ncarat_class = cut(diamonds$carat,\n                  breaks = seq(from = 0, to = 6, by = 1),\n                  right = FALSE)\ntable(carat_class)\n#&gt; carat_class\n#&gt; [0,1) [1,2) [2,3) [3,4) [4,5) [5,6) \n#&gt; 34880 16906  2114    34     5     1\nLa classe modale est donc la classe [0,1) avec une fréquence de 34880.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de tendance centrale</span>"
    ]
  },
  {
    "objectID": "mesures_tendance_centrale.html#le-mode",
    "href": "mesures_tendance_centrale.html#le-mode",
    "title": "1  Les mesures de tendance centrale",
    "section": "1.2 Le mode",
    "text": "1.2 Le mode\nLe mode est la modalité, valeur ou classe possédant la plus grande fréquence. En d’autres mots, c’est la donnée la plus fréquente.\nPuisque le mode se préoccupe seulement de la donnée la plus fréquente, il n’est pas influencé par les valeurs extrêmes.\nLorsque le mode est une classe, il est appelé classe modale.\nLe mode est noté Mo.\nLe langage R ne possède pas de fonction permettant de calculer le mode. La façon la plus simple de le calculer est d’utiliser la fonction table de R.\nPar exemple, si nous voulons connaître le mode de la variable marital de la base de données gss_cat:\n\ntable(gss_cat$marital)\n#&gt; \n#&gt;     No answer Never married     Separated      Divorced       Widowed \n#&gt;            17          5416           743          3383          1807 \n#&gt;       Married \n#&gt;         10117\n\nNous remarquons que le maximum est à la modalité Married avec une fréquence de 10117.\nSi nous nous intéressons au mode d’une variable quantitative discrète comme age de la base de données gss_cat nous obtenons:\n\ntable(gss_cat$age)\n#&gt; \n#&gt;  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37 \n#&gt;  91 249 251 278 298 361 344 396 400 385 387 376 433 407 445 425 425 417 428 438 \n#&gt;  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57 \n#&gt; 426 415 452 434 405 448 432 404 422 435 424 417 430 390 400 396 387 365 384 321 \n#&gt;  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77 \n#&gt; 326 323 338 307 310 292 253 259 231 271 205 201 213 206 189 152 180 179 171 137 \n#&gt;  78  79  80  81  82  83  84  85  86  87  88  89 \n#&gt; 150 135 127 119 105  99 100  75  74  54  57 148\n\nNous remarquons que le maximum est à la valeur 40 avec une fréquence de 452.\nDans le cas d’une variable quantitative continue, pour calculer le mode, il faut commencer par séparer les données en classes. Nous utiliserons les mêmes classes utilisées à la section:\n\ncarat_class = cut(diamonds$carat,\n                  breaks = seq(from = 0, to = 6, by = 1),\n                  right = FALSE)\ntable(carat_class)\n#&gt; carat_class\n#&gt; [0,1) [1,2) [2,3) [3,4) [4,5) [5,6) \n#&gt; 34880 16906  2114    34     5     1\n\nLa classe modale est donc la classe [0,1) avec une fréquence de 34880.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les mesures de tendance centrale</span>"
    ]
  },
  {
    "objectID": "mesures_tendance_centrale.html#la-médiane",
    "href": "mesures_tendance_centrale.html#la-médiane",
    "title": "4  Les mesures de tendance centrale",
    "section": "4.2 La médiane",
    "text": "4.2 La médiane\nLa médiane, notée Md, est la valeur qui sépare une série de données classée en ordre croissant en deux parties égales.\nLa médiane étant la valeur du milieu, elle est la valeur où le pourcentage cumulé atteint 50%.\nPuisque la médiane se préoccupe seulement de déterminer où se situe le centre des données, elle n’est pas influencée par les valeurs extrêmes. Elle est donc une mesure de tendance centrale plus fiable que la moyenne.\n\nImportant : La médiane n’est définie que pour les variables quantitatives. En effet, si vous tentez d’utiliser la médiane pour des données autres que numériques, R vous donnera un message d’erreur.\n\nLa fonction median permet de calculer la médiane en langage R.\nPar exemple, pour calculer la médiane de la variable carat de la base de données diamonds, nous avons:\n\nmedian(diamonds$carat)\n#&gt; [1] 0.7\n\nCeci signifie que 50% des diamants ont une valeur en carat inférieure ou égale à 0.7 et que 50% des diamants ont une valeur en carat supérieure ou égale à 0.7.\nNous pouvons aussi obtenir que la médiane de la variable price de la base de données diamonds est donnée par:\n\nmedian(diamonds$price)\n#&gt; [1] 2401",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de tendance centrale</span>"
    ]
  },
  {
    "objectID": "mesures_tendance_centrale.html#la-moyenne",
    "href": "mesures_tendance_centrale.html#la-moyenne",
    "title": "4  Les mesures de tendance centrale",
    "section": "4.3 La moyenne",
    "text": "4.3 La moyenne\nLa moyenne est la valeur qui pourrait remplacer chacune des données d’une série pour que leur somme demeure identique. Intuitivement, elle représente le centre d’équilibre d’une série de données. La somme des distances qui sépare les données plus petites que la moyenne devrait être la même que la somme des distances qui sépare les données plus grandes.\n\nImportant : La moyenne n’est définie que pour les variables quantitatives. En effet, si vous tentez d’utiliser la moyenne pour des données autres que numériques, R vous donnera un message d’erreur.\n\nLa fonction mean permet de calculer la moyenne en langage R.\nPar exemple, pour calculer la moyenne de la variable carat de la base de données diamonds, nous avons:\n\nmean(diamonds$carat)\n#&gt; [1] 0.7979397\n\nNous pouvons aussi obtenir que la moyenne de la variable price de la base de données diamonds est donnée par:\n\nmean(diamonds$price)\n#&gt; [1] 3932.8",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de tendance centrale</span>"
    ]
  },
  {
    "objectID": "mesures_dispersion.html",
    "href": "mesures_dispersion.html",
    "title": "2  Les mesures de dispersion",
    "section": "",
    "text": "2.1 L’étendue\nLa première mesure de dispersion, l’étendue, est la différence entre la valeur maximale et la valeur minimale.\nL’étendue ne tenant compte que du maximum et du minimum, elle est grandement influencée par les valeurs extrêmes. Elle est donc une mesure de dispersion peu fiable.\nLa fonction range permet de calculer l’étendue d’une variable en langage R.\nPar exemple, pour calculer l’étendue de la variable carat de la base de données diamonds, nous avons:\nrange(diamonds$carat)\n#&gt; [1] 0.20 5.01\nNous pouvons donc calculer l’étendue de la variable carat en soustrayant les deux valeurs obtenues par la fonction range, c’est-à-dire que l’étendue est 5.01-0.2 = 4.81.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les mesures de dispersion</span>"
    ]
  },
  {
    "objectID": "mesures_dispersion.html#la-variance",
    "href": "mesures_dispersion.html#la-variance",
    "title": "2  Les mesures de dispersion",
    "section": "2.2 La variance",
    "text": "2.2 La variance\nLa variance sert principalement à calculer l’écart-type, la mesure de dispersion la plus connue.\n\nAttention : Les unités de la variance sont des unités2.\n\nLa fonction var permet de calculer la variance d’une variable en langage R.\nPar exemple, pour calculer la variance de la variable carat de la base de données diamonds, nous avons:\n\nvar(diamonds$carat)\n#&gt; [1] 0.2246867\n\nCeci signifie que la variance de la variable carat est 0.2246867 carat2.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les mesures de dispersion</span>"
    ]
  },
  {
    "objectID": "mesures_dispersion.html#lécart-type",
    "href": "mesures_dispersion.html#lécart-type",
    "title": "2  Les mesures de dispersion",
    "section": "2.3 L’écart-type",
    "text": "2.3 L’écart-type\nL’écart-type est la mesure de dispersion la plus couramment utilisée. Il peut être vu comme la « moyenne » des écarts entre les données et la moyenne.\nPuisque l’écart-type tient compte de chacune des données, il est une mesure de dispersion beaucoup plus fiable que l’étendue.\nIl est défini comme la racine carrée de la variance.\nLa fonction sd permet de calculer l’’écart-type d’une variable en langage R.\nPar exemple, pour calculer l’écart-type de la variable carat de la base de données diamonds, nous avons:\n\nsd(diamonds$carat)\n#&gt; [1] 0.4740112\n\nCeci signifie que l’écart-type de la variable carat est 0.4740112 carat.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les mesures de dispersion</span>"
    ]
  },
  {
    "objectID": "mesures_dispersion.html#le-coefficient-de-variation",
    "href": "mesures_dispersion.html#le-coefficient-de-variation",
    "title": "2  Les mesures de dispersion",
    "section": "2.4 Le coefficient de variation",
    "text": "2.4 Le coefficient de variation\nLe coefficient de variation, noté C. V., est calculé comme suit :\n\\[\\begin{equation}\nC.V. = \\dfrac{\\text{ecart-type}}{\\text{moyenne}}\\times 100\\%\n\\end{equation}\\]\nSi le coefficient est inférieur à 15%, les données sont dites homogènes. Cela veut dire que les données sont situées près les unes des autres.\nDans le cas contraire, les données sont dites hétérogènes. Cela veut dire que les données sont très dispersées.\n\nImportant : Le coefficient de variation ne possède pas d’unité, outre le symbole de pourcentage.\n\nIl n’existe pas de fonctions en R permettant de calculer directement le coefficient de variation. Par contre, nous pouvons utiliser en conjonction les fonctions sd et mean pour le calculer.\nPar exemple, pour calculer le coefficient de variation de la variable carat de la base de données diamonds, nous avons:\n\nsd(diamonds$carat)/mean(diamonds$carat)*100\n#&gt; [1] 59.40439\n\nLe C.V. de la variable carat est donc 59.4043906 %, ce qui signifie que les données sont hétérogènes, car le coefficient de variation est plus grand que 15%.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les mesures de dispersion</span>"
    ]
  },
  {
    "objectID": "mesures_position.html",
    "href": "mesures_position.html",
    "title": "4  Les mesures de position",
    "section": "",
    "text": "4.1 La cote z\nCette mesure de position se base sur la moyenne et l’écart-type.\nLa cote Z d’une donnée x est calculée comme suit :\n\\[\\begin{equation}\nZ = \\dfrac{x-\\text{moyenne}}{\\text{ecart-type}}\n\\end{equation}\\]\nUne cote Z peut être positive, négative ou nulle.\nIl n’existe pas de fonctions en R permettant de calculer directement la cote Z. Par contre, nous pouvons utiliser en conjonction les fonctions sd et mean pour la calculer.\nPar exemple, si nous voulons calculer la cote Z d’un diamant de 3 carats, nous avons:\n(3-mean(diamonds$carat))/sd(diamonds$carat)\n#&gt; [1] 4.645587",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de position</span>"
    ]
  },
  {
    "objectID": "mesures_position.html#la-cote-z",
    "href": "mesures_position.html#la-cote-z",
    "title": "4  Les mesures de position",
    "section": "",
    "text": "Important : La cote z ne possède pas d’unités.\n\n\n\n\n\nCote Z\nInterprétation\n\n\n\n\nZ&gt;0\ndonnée supérieure à la moyenne\n\n\nZ&lt;0\ndonnée inférieure à la moyenne\n\n\nZ=0\ndonnée égale à la moyenne",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de position</span>"
    ]
  },
  {
    "objectID": "mesures_position.html#les-quantiles",
    "href": "mesures_position.html#les-quantiles",
    "title": "4  Les mesures de position",
    "section": "4.2 Les quantiles",
    "text": "4.2 Les quantiles\nUn quantile est une donnée qui correspond à un certain pourcentage cumulé.\nParmi les quantiles, on distingue les quartiles, les quintiles, les déciles et les centiles.\n\nLes quartiles Q1, Q2 et Q3, séparent les données en quatre parties égales. Environ 25% des données sont inférieures ou égales à Q1. Environ 50% des données sont inférieures ou égales à Q2. Environ 75% des données sont inférieures ou égales à Q3.\nLes quintiles V1, V2, V3 et V4, séparent les données en cinq parties égales. Environ 20% des données sont inférieures ou égales à V1. Environ 40% des données sont inférieures ou égales à V2. Etc.\nLes déciles D1, D2, …, D8 et D9, séparent les données en dix parties égales. Environ 10% des données sont inférieures ou égales à D1. Environ 20% des données sont inférieures ou égales à D2. Etc.\nLes centiles C1, C2, …, C98 et C99, séparent les données en cent parties égales. Environ 1% des données sont inférieures ou égales à C1. Environ 2% des données sont inférieures ou égales à C2. Etc.\n\n\nIl est utile de noter que certains quantiles se recoupent.\n\nLa fonction quantile permet de calculer n’importe quel quantile d’une variable en langage R. Il suffit d’indiquer la variable étudiée ainsi que le pourcentage du quantile voulu.\nPar exemple, si nous voulons calculer D1 pour la variable carat, nous allons utiliser la fonction quantile avec une probabilité de 0,1.\n\nquantile(diamonds$carat, 0.1)\n#&gt;  10% \n#&gt; 0.31\n\nCeci implique que 10% des diamants ont une valeur en carat inférieure ou égale à 0.31 carat.\nNous pouvons calculer le troisième quartile Q3 de la variable price en utilisant la fonction quantile avec une probabilité de 0,75.\n\nquantile(diamonds$price, 0.75)\n#&gt;     75% \n#&gt; 5324.25\n\nCeci implique que 75% des diamants ont un prix en dollars inférieur ou égal à 5324.25 $.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de position</span>"
    ]
  },
  {
    "objectID": "mesures_position.html#la-commande-summary",
    "href": "mesures_position.html#la-commande-summary",
    "title": "4  Les mesures de position",
    "section": "4.3 La commande summary",
    "text": "4.3 La commande summary\nLa commande summary produit un sommaire contenant six mesures importantes:\n\nMin : le minimum de la variable\n1st Qu.: Le premier quartile, Q1, de la variable\nMedian : La médiane de la variable\nMean : La moyenne de la variable\n3rd Qu. : Le troisième quartile, Q3, de la variable\nMax : Le maximum de la variable\n\nNous pouvons donc produire le sommaire de la variable price de la base de données diamonds de la façon suivante:\n\nsummary(diamonds$price)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;     326     950    2401    3933    5324   18823",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de position</span>"
    ]
  },
  {
    "objectID": "mesures_position.html#le-rang-centile",
    "href": "mesures_position.html#le-rang-centile",
    "title": "4  Les mesures de position",
    "section": "4.4 Le rang centile",
    "text": "4.4 Le rang centile\nUn rang centile représente le pourcentage cumulé, exprimé en nombre entier, qui correspond à une certaine donnée. Nous déterminerons les rangs centiles pour les variables continues seulement.\nLes rangs centiles sont donc exactement l’inverse des centiles.\nIl n’existe pas de fonctions dans R permettant de trouver directement le rang centile, mais il est facile d’utiliser la fonction mean pour le trouver.\nPar exemple, si nous voulons trouver le rang centile d’un diamant qui coûte 500$, il suffit d’utiliser la commande suivante. La commande calcule la moyenne de toutes les valeurs en dollars des diamants coûtant 500$ ou moins.\n\nfloor(mean(diamonds$price&lt;=500)*100)\n#&gt; [1] 3\n\nCeci signifie que pour un diamant de 500$, il y a 3 % des diamants qui ont une valeur égale ou inférieure.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Les mesures de position</span>"
    ]
  },
  {
    "objectID": "variables_qualitatives.html",
    "href": "variables_qualitatives.html",
    "title": "1  Les variables qualitatives",
    "section": "",
    "text": "1.1 Tableau de fréquences\nUne fois les données d’un sondage recueillies, il est plus aisé d’analyser ces données si elles sont classées dans un tableau.\nLe tableau de fréquences que nous utiliserons est le suivant:\nLorsque les données se trouvent dans une tibble dans R, il est possible d’utiliser la commande freq de la librairie questionr pour afficher le tableau de fréquences. La commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\nDans la base de données forcats::gss_cat, nous allons afficher la variable marital.\nfreq(gss_cat$marital,\n            cum = FALSE,\n            valid = FALSE,\n            total = TRUE)\n#&gt;                   n     %\n#&gt; No answer        17   0.1\n#&gt; Never married  5416  25.2\n#&gt; Separated       743   3.5\n#&gt; Divorced       3383  15.7\n#&gt; Widowed        1807   8.4\n#&gt; Married       10117  47.1\n#&gt; Total         21483 100.0",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les variables qualitatives</span>"
    ]
  },
  {
    "objectID": "variables_qualitatives.html#tableau-de-fréquences",
    "href": "variables_qualitatives.html#tableau-de-fréquences",
    "title": "1  Les variables qualitatives",
    "section": "",
    "text": "Titre\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\n\n\n(Modalités)\n(Fréquences absolues)\n(Fréquences relatives)\n\n\nTotal\nn\n100%\n\n\n\n\nImportant : Le titre doit toujours être indiqué lors de la construction d’un tableau de fréquence.\n\n\n\ncum = FALSE; permet de ne pas afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les variables qualitatives</span>"
    ]
  },
  {
    "objectID": "variables_qualitatives.html#représentation-graphique---le-diagramme-à-bandes",
    "href": "variables_qualitatives.html#représentation-graphique---le-diagramme-à-bandes",
    "title": "1  Les variables qualitatives",
    "section": "1.2 Représentation graphique - Le diagramme à bandes",
    "text": "1.2 Représentation graphique - Le diagramme à bandes\nPour représenter graphiquement les variables qualitatives, nous allons utiliser les diagrammes à bandes.\nPour construire ce graphique:\n\nChaque modalité est représentée par un rectangle.\nLa hauteur de chaque rectangle doit être proportionnelle\n\nau nombre d’unités statistiques (la fréquence absolue) OU\nau pourcentage d’unités statistiques (la fréquence relative).\n\nLe titre et les fréquences (absolues ou relatives) doivent être indiqués.\nL’axe des x doit posséder un titre : le nom de la variable étudiée.\nL’axe des y doit posséder un titre : “Nombre d’unités statistiques” ou “Pourcentage d’unités statistiques”.\nLa graduation de l’axe des y doit commencer à zéro (l’axe ne doit pas être coupé).\nLes rectangles doivent être équidistants et de largeur égale. De plus, ils ne doivent pas être collés.\n\nPour produire le diagramme à bandes, nous utiliserons l’extension ggplot2 qui est chargée avec le coeur de la librairie tidyverse. La grammaire graphique de ggplot2 peut être décrite de la façon suivante:\n\nA statistical graphic is a mapping of data variables to aesthetic attributes of geometric objects.\n\nPlus spécifiquement, nous pouvons briser un graphique en trois composantes essentielles:\n\ndata: la base de données contenant les variables que nous désirons visualiser.\ngeom: l’objet géométrique en question. Ceci réfère au type d’objet que nous pouvons observer dans notre graphique. Par exemple, des points, des lignes, des barres, etc.\naes: les attributs esthétiques (aesthetics) de l’objet géométrique que nous affichons dans notre graphique. Par exemple, la position x/y, la couleur, la forme, la taille. Chaque attribut peut être associé à une variable dans notre base de données.\n\n\n1.2.1 La variable marital\nNous allons visualiser le diagramme à bandes de la variable marital provenant de la base de données forcats::gss_cat. Nous devons spécifier:\n\ndata = gss_cat: la base de données.\naes(x = marital): la variable étudiée.\ngeom_bar(): nous voulons un diagramme à bandes\n\nLa commande est donc:\n\nggplot(data = gss_cat, aes(x = marital))+\n  geom_bar()\n\n\n\n\n\n\n\n\nPour ajouter un titre et indiquer les titres des axes x et y, nous utilisons la commande labs (pour labels).\n\nggplot(data = gss_cat, aes(x = marital))+\n  geom_bar()+\n  labs(\n    title = \"Répartition de 21 483 personnes selon leur statut matrimonial\",\n    x = \"Statut matrimonial\",\n    y = \"Nombre d'unités statistiques\"\n  )\n\n\n\n\n\n\n\n\n\n\n1.2.2 La variable relig\nNous pouvons afficher le diagramme à bandes horizontales de la variable relig en ajoutant la commande coord_flip(). Nous avons donc:\n\nggplot(data = gss_cat, aes(x = relig))+\n  geom_bar()+\n  labs(\n    title = \"Répartition de 21 483 personnes selon leur religion\",\n    x = \"Religion\",\n    y = \"Nombre d'unités statistiques\"\n  )+\n  coord_flip()",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les variables qualitatives</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_discretes.html",
    "href": "variables_quantitatives_discretes.html",
    "title": "2  Les variables quantitatives discrètes",
    "section": "",
    "text": "2.1 Tableau de fréquences\nUne fois les données d’un sondage recueillies, il est plus aisé d’analyser ces données si elles sont classées dans un tableau.\nLe tableau de fréquences que nous utiliserons est le suivant :\nLe pourcentage cumulé permet de déterminer le pourcentage des répondants qui ont indiqué la valeur correspondante, ou une plus petite. Il sert à donner une meilleure vue d’ensemble.\nLa commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\nDans la base de données nycflights13::planes, nous allons afficher la variable engines. Dans la commande ci-dessous, nous enregistrons le tableau de fréquences dans la variable tab_engines. Nous l’affichons ensuite à l’aide de la commande kable.\nfreq(planes$engines,\n                cum = TRUE,\n                valid = FALSE,\n                total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 1       27   0.8   0.8\n#&gt; 2     3288  99.0  99.8\n#&gt; 3        3   0.1  99.9\n#&gt; 4        4   0.1 100.0\n#&gt; Total 3322 100.0 100.0\nNous allons maintenant produire le tableau de fréquences de la variable seats de la base de données nycflights13. Cette variable correspond au nombre de sièges par avion (pour avoir cette information, vous pouvez utiliser la commande ?nycflights13::planes). Nous avons:\nfreq(planes$seats,\n                cum = TRUE,\n                valid = FALSE,\n                total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 2       16   0.5   0.5\n#&gt; 4        5   0.2   0.6\n#&gt; 5        2   0.1   0.7\n#&gt; 6        3   0.1   0.8\n#&gt; 7        2   0.1   0.8\n#&gt; 8        5   0.2   1.0\n#&gt; 9        1   0.0   1.0\n#&gt; 10       1   0.0   1.1\n#&gt; 11       2   0.1   1.1\n#&gt; 12       1   0.0   1.1\n#&gt; 14       1   0.0   1.2\n#&gt; 16       1   0.0   1.2\n#&gt; 20      80   2.4   3.6\n#&gt; 22       2   0.1   3.7\n#&gt; 55     390  11.7  15.4\n#&gt; 80      83   2.5  17.9\n#&gt; 95     123   3.7  21.6\n#&gt; 100    102   3.1  24.7\n#&gt; 102      1   0.0  24.7\n#&gt; 128      1   0.0  24.7\n#&gt; 139      8   0.2  25.0\n#&gt; 140    411  12.4  37.4\n#&gt; 142    158   4.8  42.1\n#&gt; 145     57   1.7  43.8\n#&gt; 147      3   0.1  43.9\n#&gt; 149    452  13.6  57.5\n#&gt; 172     81   2.4  60.0\n#&gt; 178    283   8.5  68.5\n#&gt; 179    134   4.0  72.5\n#&gt; 182    159   4.8  77.3\n#&gt; 189     73   2.2  79.5\n#&gt; 191     87   2.6  82.1\n#&gt; 199     43   1.3  83.4\n#&gt; 200    256   7.7  91.1\n#&gt; 222     13   0.4  91.5\n#&gt; 255     16   0.5  92.0\n#&gt; 260      4   0.1  92.1\n#&gt; 269      1   0.0  92.1\n#&gt; 275     25   0.8  92.9\n#&gt; 290      6   0.2  93.1\n#&gt; 292     16   0.5  93.6\n#&gt; 300     17   0.5  94.1\n#&gt; 330    114   3.4  97.5\n#&gt; 375      1   0.0  97.5\n#&gt; 377     14   0.4  98.0\n#&gt; 379     55   1.7  99.6\n#&gt; 400     12   0.4 100.0\n#&gt; 450      1   0.0 100.0\n#&gt; Total 3322 100.0 100.0\nComme nous pouvons le constater, le tableau est très grand car la variable seats possède 48 valeurs différentes. Nous allons donc parfois séparer nos valeurs en classes comme nous le verrons au Chapitre 3.",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_discretes.html#tabfreqquantdiscr",
    "href": "variables_quantitatives_discretes.html#tabfreqquantdiscr",
    "title": "2  Les variables quantitatives discrètes",
    "section": "2.2 Tableau de fréquences",
    "text": "2.2 Tableau de fréquences\nUne fois les données d’un sondage recueillies, il est plus aisé d’analyser ces données si elles sont classées dans un tableau.\nLe tableau de fréquences que nous utiliserons est le suivant :\n\n\n\n\n\n\n\n\n\nTitre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Valeurs)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\nLe pourcentage cumulé permet de déterminer le pourcentage des répondants qui ont indiqué la valeur correspondante, ou une plus petite. Il sert à donner une meilleure vue d’ensemble.\n\nSi pour la valeur \\(x_i\\) de la variable \\(A\\) la pourcentage cumulé est de \\(b\\) %, ceci signifie que \\(b\\) % des valeurs de la variable \\(A\\) sont plus petites ou égales à \\(x_i\\).\n\nLa commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\n\ncum = TRUE; permet d’afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total\n\nDans la base de données nycflights13::planes, nous allons afficher la variable engines. Dans la commande ci-dessous, nous enregistrons le tableau de fréquences dans la variable tab_engines. Nous l’affichons ensuite à l’aide de la commande kable.\n\nfreq(planes$engines,\n                cum = TRUE,\n                valid = FALSE,\n                total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 1       27   0.8   0.8\n#&gt; 2     3288  99.0  99.8\n#&gt; 3        3   0.1  99.9\n#&gt; 4        4   0.1 100.0\n#&gt; Total 3322 100.0 100.0\n\nNous allons maintenant produire le tableau de fréquences de la variable seats de la base de données nycflights13. Cette variable correspond au nombre de sièges par avion (pour avoir cette information, vous pouvez utiliser la commande ?nycflights13::planes). Nous avons:\n\nfreq(planes$seats,\n                cum = TRUE,\n                valid = FALSE,\n                total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 2       16   0.5   0.5\n#&gt; 4        5   0.2   0.6\n#&gt; 5        2   0.1   0.7\n#&gt; 6        3   0.1   0.8\n#&gt; 7        2   0.1   0.8\n#&gt; 8        5   0.2   1.0\n#&gt; 9        1   0.0   1.0\n#&gt; 10       1   0.0   1.1\n#&gt; 11       2   0.1   1.1\n#&gt; 12       1   0.0   1.1\n#&gt; 14       1   0.0   1.2\n#&gt; 16       1   0.0   1.2\n#&gt; 20      80   2.4   3.6\n#&gt; 22       2   0.1   3.7\n#&gt; 55     390  11.7  15.4\n#&gt; 80      83   2.5  17.9\n#&gt; 95     123   3.7  21.6\n#&gt; 100    102   3.1  24.7\n#&gt; 102      1   0.0  24.7\n#&gt; 128      1   0.0  24.7\n#&gt; 139      8   0.2  25.0\n#&gt; 140    411  12.4  37.4\n#&gt; 142    158   4.8  42.1\n#&gt; 145     57   1.7  43.8\n#&gt; 147      3   0.1  43.9\n#&gt; 149    452  13.6  57.5\n#&gt; 172     81   2.4  60.0\n#&gt; 178    283   8.5  68.5\n#&gt; 179    134   4.0  72.5\n#&gt; 182    159   4.8  77.3\n#&gt; 189     73   2.2  79.5\n#&gt; 191     87   2.6  82.1\n#&gt; 199     43   1.3  83.4\n#&gt; 200    256   7.7  91.1\n#&gt; 222     13   0.4  91.5\n#&gt; 255     16   0.5  92.0\n#&gt; 260      4   0.1  92.1\n#&gt; 269      1   0.0  92.1\n#&gt; 275     25   0.8  92.9\n#&gt; 290      6   0.2  93.1\n#&gt; 292     16   0.5  93.6\n#&gt; 300     17   0.5  94.1\n#&gt; 330    114   3.4  97.5\n#&gt; 375      1   0.0  97.5\n#&gt; 377     14   0.4  98.0\n#&gt; 379     55   1.7  99.6\n#&gt; 400     12   0.4 100.0\n#&gt; 450      1   0.0 100.0\n#&gt; Total 3322 100.0 100.0\n\nComme nous pouvons le constater, le tableau est très grand car la variable seats possède 48 valeurs différentes. Nous allons donc parfois séparer nos valeurs en classes coomme nous le verrons au chapitre @ref(variablesquantitativescontinues).",
    "crumbs": [
      "Les types de variables",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_discretes.html#représentation-graphique---le-diagramme-à-bandes",
    "href": "variables_quantitatives_discretes.html#représentation-graphique---le-diagramme-à-bandes",
    "title": "2  Les variables quantitatives discrètes",
    "section": "2.2 Représentation graphique - Le diagramme à bandes",
    "text": "2.2 Représentation graphique - Le diagramme à bandes\nLe graphique utilisé pour représenter une variable quantitative discrète est le diagramme à bâtons.\nCe graphique est construit comme le diagramme à bandes rectangulaires verticales, sauf que les rectangles sont remplacés par des bâtons très minces (généralement une simple ligne). Pour modifier la largeur de vos lignes, vous utilisez l’option width dans la commande geom_bar().\n\nggplot(data = planes, aes(x = engines))+\n  geom_bar(width = 0.1)+\n  labs(\n    title = \"Répartition de 3 322 avions selon le nombre de leurs moteurs\",\n    x = \"Nombre de moteurs\",\n    y = \"Nombre d'unités statistiques\"\n  )\n\n\n\n\n\n\n\n\nVous pouvez produire un diagramme à bâtons horizontaux en utilisant la commande coord_flip().\n\nggplot(data = gss_cat, aes(x = tvhours))+\n  geom_bar(width = 0.1)+\n  labs(\n    title = \"Répartition de 11 137 répondants selon le nombre d'heures de télévision écoutées par jour\",\n    x = \"Nombre d'heures de télévision\",\n    y = \"Nombre d'unités statistiques\"\n  )+\n  coord_flip()\n#&gt; Warning: Removed 10146 rows containing non-finite outside the scale range\n#&gt; (`stat_count()`).",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_continues.html",
    "href": "variables_quantitatives_continues.html",
    "title": "3  Les variables quantitatives continues",
    "section": "",
    "text": "3.1 Tableau de fréquences\nLes différentes valeurs d’une variable continue étant impossibles à énumérer, nous devrons regrouper celles-ci en classes. La première colonne sera donc constituée de celles-ci.\nIl sera parfois utile d’ajouter une colonne supplémentaire au tableau habituel: le milieu de classe. Celui-ci est calculé en faisant la moyenne entre le début de classe et la fin de classe.\nLe tableau de fréquences que nous utiliserons est le suivant :\nPour être en mesure de briser une variable en classes, il faut utiliser la commande cut. Les options utilisées sont les suivantes:\nPour ce faire, nous devons utiliser la commande cut qui permet d’indiquer les frontières de ces classes. Voici un exemple où nous créons des classes de largeur 25:\ntemp_classes &lt;- cut(weather$temp,\n                    breaks = c(0, 25, 50, 75, 100, 125),\n                    include.lowest = TRUE,\n                    right = FALSE)\nunique(temp_classes)\n#&gt; [1] [25,50)   [0,25)    [50,75)   [75,100)  [100,125] &lt;NA&gt;     \n#&gt; Levels: [0,25) [25,50) [50,75) [75,100) [100,125]\nNous nous retrouvons donc avec 6 classes. Lorsque nous présenterons les variables sous forme de tableau, il nous sera utile d’utiliser la commande cut.\nL’option include.lowest indique que nous voulons conserver … L’option right = FALSE indique que nous voulons des intervalles fermés à gauche et ouverts à droite.\nPour simplifier le code, nous créons en premier lieu une variable air_time_rec avec les classes et nous l’affichons ensuite avec freq. Remarquons que nous avons ajouté l’option valid = TRUE car certaines valeurs sont manquantes. Rappelons que les données manquantes sont représentées par NA en R. Deux colonnes sont ajoutées:\nNous obtenons donc:\nair_time_rec &lt;- cut(flights$air_time, \n                    include.lowest=TRUE,\n                    right=FALSE,\n                    breaks=c(0, 100, 200, 300, 400, 500, 600, 700))\nfreq(air_time_rec,\n                cum = TRUE,\n                total = TRUE,\n                valid = TRUE)\n#&gt;                n     %  val%  %cum val%cum\n#&gt; [0,100)   105687  31.4  32.3  31.4    32.3\n#&gt; [100,200) 146527  43.5  44.8  74.9    77.0\n#&gt; [200,300)  31036   9.2   9.5  84.1    86.5\n#&gt; [300,400)  43347  12.9  13.2  97.0    99.8\n#&gt; [400,500)     48   0.0   0.0  97.0    99.8\n#&gt; [500,600)    132   0.0   0.0  97.0    99.8\n#&gt; [600,700]    569   0.2   0.2  97.2   100.0\n#&gt; NA          9430   2.8    NA 100.0      NA\n#&gt; Total     336776 100.0 100.0 100.0   100.0\nÀ la section Section 2.1, nous avons vu que la variable seats de la base de données planes contenait 48 valeurs différentes. Nous allons donc créer le tableau de fréquences avec des classes.\nseats_rec &lt;- cut(planes$seats, \n                 include.lowest=TRUE,  \n                 right=FALSE,\n                 breaks=c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450))\nfreq(seats_rec,\n            cum = TRUE,\n            total = TRUE,\n            valid = TRUE)\n#&gt;              n     %  val%  %cum val%cum\n#&gt; [0,50)     122   3.7   3.7   3.7     3.7\n#&gt; [50,100)   596  17.9  17.9  21.6    21.6\n#&gt; [100,150) 1193  35.9  35.9  57.5    57.5\n#&gt; [150,200)  860  25.9  25.9  83.4    83.4\n#&gt; [200,250)  269   8.1   8.1  91.5    91.5\n#&gt; [250,300)   68   2.0   2.0  93.6    93.6\n#&gt; [300,350)  131   3.9   3.9  97.5    97.5\n#&gt; [350,400)   70   2.1   2.1  99.6    99.6\n#&gt; [400,450]   13   0.4   0.4 100.0   100.0\n#&gt; Total     3322 100.0 100.0 100.0   100.0",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives continues</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_continues.html#tableau-de-fréquences",
    "href": "variables_quantitatives_continues.html#tableau-de-fréquences",
    "title": "3  Les variables quantitatives continues",
    "section": "",
    "text": "Titre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Classes)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\n\n\n\n\n\n\ninclude.lowest=TRUE: permet d’inclure les valeurs extrèmes\nright=FALSE: permet d’avoir des classes fermées à gauche et ouvertes à droite\nbreaks=c(0, 100, 200, 300, 400, 500, 600, 700): permet de couper les classes à 0, 100, 200, 300, 400, 500, 600 et 700\n\n\n\nval%: le pourcentage en omettant les valeurs manquantes\nval%cum: le pourcentage cumulé en omettant les valeurs manquantes",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives continues</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_continues.html#représentation-graphique---lhistogramme",
    "href": "variables_quantitatives_continues.html#représentation-graphique---lhistogramme",
    "title": "3  Les variables quantitatives continues",
    "section": "3.2 Représentation graphique - L’histogramme",
    "text": "3.2 Représentation graphique - L’histogramme\n\nggplot(flights, aes(x = air_time))+\n  geom_histogram(binwidth = 50, center = 25, color = 'white')+\n  labs(\n    title = \"Répartition de 327 346 vols selon le nombre de minutes de vol\",\n    x = \"Nombre de minutes de vol\",\n    y = \"Nombre d'unités statistiques\"\n  )\n#&gt; Warning: Removed 9430 rows containing non-finite outside the scale range\n#&gt; (`stat_bin()`).",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives continues</span>"
    ]
  },
  {
    "objectID": "variables_quantitatives_discretes.html#sec-tabfreqquantdiscr",
    "href": "variables_quantitatives_discretes.html#sec-tabfreqquantdiscr",
    "title": "2  Les variables quantitatives discrètes",
    "section": "",
    "text": "Titre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Valeurs)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\n\n\nSi pour la valeur \\(x_i\\) de la variable \\(A\\) la pourcentage cumulé est de \\(b\\) %, ceci signifie que \\(b\\) % des valeurs de la variable \\(A\\) sont plus petites ou égales à \\(x_i\\).\n\n\n\ncum = TRUE; permet d’afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "2  L’extension ggplot2",
    "section": "",
    "text": "2.1 Initialisation\nUn graphique ggplot2 s’initialise à l’aide de la fonction ggplot(). Les données représentées graphiquement sont toujours issues d’un tableau de données (data frame ou tibble), qu’on passe en argument data à la fonction :\nggplot(data = rp)\n## Ou, équivalent\nggplot(rp)\nOn a défini la source de données, il faut maintenant ajouter des éléments de représentation graphique. Ces éléments sont appelés des geom, et on les ajoute à l’objet graphique de base avec l’opérateur +.\nUn des geom les plus simples est geom_histogram. On peut l’ajouter de la manière suivante :\nggplot(rp) +\n    geom_histogram()\nReste à indiquer quelle donnée nous voulons représenter sous forme d’histogramme. Cela se fait à l’aide d’arguments passés via la fonction aes(). Ici nous avons un paramètre à renseigner, x, qui indique la variable à représenter sur l’axe des x (l’axe horizontal). Ainsi, si on souhaite représenter la distribution des communes du jeu de données selon le pourcentage de cadres dans leur population active (variable cadres), on pourra faire :\nggplot(rp) +\n    geom_histogram(aes(x = cadres))\nSi on veut représenter une autre variable, il suffit de changer la valeur de x :\nggplot(rp) +\n    geom_histogram(aes(x = ouvr))\nCertains geom prennent plusieurs paramètres. Ainsi, si on veut représenter un nuage de points, on peut le faire en ajoutant un geom_point. On doit alors indiquer à la fois la position en x (la variable sur l’axe horizontal) et en y (la variable sur l’axe vertical) de ces points, il faut donc passer ces deux arguments à aes() :\nggplot(rp) +\n    geom_point(aes(x = dipl_sup, y = cadres))\nOn peut modifier certains attributs graphiques d’un geom en lui passant des arguments supplémentaires. Par exemple, pour un nuage de points, on peut modifier la couleur des points avec l’argument color, leur taille avec l’argument size, et leur transparence avec l’argument alpha :\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres),\n        color = \"darkgreen\", size = 3, alpha = 0.3\n    )\nOn notera que dans ce cas les arguments sont dans la fonction geom mais à l’extérieur du aes(). Plus d’explications sur ce point dans quelques instants.",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#représentation-graphique---le-diagramme-à-bandes",
    "href": "ggplot2.html#représentation-graphique---le-diagramme-à-bandes",
    "title": "4  L’extension ggplot2",
    "section": "",
    "text": "Chaque modalité est représentée par un rectangle.\nLa hauteur de chaque rectangle doit être proportionnelle\n\nau nombre d’unités statistiques (la fréquence absolue) OU\nau pourcentage d’unités statistiques (la fréquence relative).\n\nLe titre et les fréquences (absolues ou relatives) doivent être indiqués.\nL’axe des x doit posséder un titre : le nom de la variable étudiée.\nL’axe des y doit posséder un titre : “Nombre d’unités statistiques” ou “Pourcentage d’unités statistiques”.\nLa graduation de l’axe des y doit commencer à zéro (l’axe ne doit pas être coupé).\nLes rectangles doivent être équidistants et de largeur égale. De plus, ils ne doivent pas être collés.\n\n\n\nA statistical graphic is a mapping of data variables to aesthetic attributes of geometric objects.\n\n\n\ndata: la base de données contenant les variables que nous désirons visualiser.\ngeom: l’objet géométrique en question. Ceci réfère au type d’objet que nous pouvons observer dans notre graphique. Par exemple, des points, des lignes, des barres, etc.\naes: les attributs esthétiques (aesthetics) de l’objet géométrique que nous affichons dans notre graphique. Par exemple, la position x/y, la couleur, la forme, la taille. Chaque attribut peut être associé à une variable dans notre base de données.\n\n\n4.1.1 La variable marital\nNous allons visualiser le diagramme à bandes de la variable marital provenant de la base de données forcats::gss_cat. Nous devons spécifier:\n\ndata = gss_cat: la base de données.\naes(x = marital): la variable étudiée.\ngeom_bar(): nous voulons un diagramme à bandes\n\nLa commande est donc:\n\nggplot(data = gss_cat, aes(x = marital))+\n  geom_bar()\n\n\n\n\n\n\n\n\nPour ajouter un titre et indiquer les titres des axes x et y, nous utilisons la commande labs (pour labels).\n\nggplot(data = gss_cat, aes(x = marital))+\n  geom_bar()+\n  labs(\n    title = \"Répartition de 21 483 personnes selon leur statut matrimonial\",\n    x = \"Statut matrimonial\",\n    y = \"Nombre d'unités statistiques\"\n  )\n\n\n\n\n\n\n\n\n\n\n4.1.2 La variable relig\nNous pouvons afficher le diagramme à bandes horizontales de la variable relig en ajoutant la commande coord_flip(). Nous avons donc:\n\nggplot(data = gss_cat, aes(x = relig))+\n  geom_bar()+\n  labs(\n    title = \"Répartition de 21 483 personnes selon leur religion\",\n    x = \"Religion\",\n    y = \"Nombre d'unités statistiques\"\n  )+\n  coord_flip()",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#initialisation",
    "href": "ggplot2.html#initialisation",
    "title": "2  L’extension ggplot2",
    "section": "",
    "text": "Note\n\n\n\nQuand on spécifie une variable, inutile d’indiquer le nom du tableau de données sous la forme rp$ouvr, car ggplot2 recherche automatiquement la variable dans le tableau de données indiqué avec le paramètre data. On peut donc se contenter de ouvr.",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "tableaux_qualitatives.html",
    "href": "tableaux_qualitatives.html",
    "title": "2  Les variables qualitatives",
    "section": "",
    "text": "2.1 Tableau de fréquences\nUne fois les données d’un sondage recueillies, il est plus aisé d’analyser ces données si elles sont classées dans un tableau.\nLe tableau de fréquences que nous utiliserons est le suivant:\nLorsque les données se trouvent dans une tibble dans R, il est possible d’utiliser la commande freq de la librairie questionr pour afficher le tableau de fréquences. La commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\nDans la base de données forcats::gss_cat, nous allons afficher la variable marital.\nfreq(gss_cat$marital,\n            cum = FALSE,\n            valid = FALSE,\n            total = TRUE)\n#&gt;                   n     %\n#&gt; No answer        17   0.1\n#&gt; Never married  5416  25.2\n#&gt; Separated       743   3.5\n#&gt; Divorced       3383  15.7\n#&gt; Widowed        1807   8.4\n#&gt; Married       10117  47.1\n#&gt; Total         21483 100.0",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les variables qualitatives</span>"
    ]
  },
  {
    "objectID": "tableaux_qualitatives.html#tableau-de-fréquences",
    "href": "tableaux_qualitatives.html#tableau-de-fréquences",
    "title": "2  Les variables qualitatives",
    "section": "",
    "text": "Titre\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\n\n\n(Modalités)\n(Fréquences absolues)\n(Fréquences relatives)\n\n\nTotal\nn\n100%\n\n\n\n\nImportant : Le titre doit toujours être indiqué lors de la construction d’un tableau de fréquence.\n\n\n\ncum = FALSE; permet de ne pas afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Les variables qualitatives</span>"
    ]
  },
  {
    "objectID": "tableaux_quantitatives_discretes.html",
    "href": "tableaux_quantitatives_discretes.html",
    "title": "3  Les variables quantitatives discrètes",
    "section": "",
    "text": "3.1 Tableau de fréquences\nUne fois les données d’un sondage recueillies, il est plus aisé d’analyser ces données si elles sont classées dans un tableau.\nLe tableau de fréquences que nous utiliserons est le suivant :\nLe pourcentage cumulé permet de déterminer le pourcentage des répondants qui ont indiqué la valeur correspondante, ou une plus petite. Il sert à donner une meilleure vue d’ensemble.\nLa commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\nDans la base de données nycflights13::planes, nous allons afficher la variable engines. Dans la commande ci-dessous, nous enregistrons le tableau de fréquences dans la variable tab_engines. Nous l’affichons ensuite à l’aide de la commande kable.\nfreq(planes$engines,\n                cum = TRUE,\n                valid = FALSE,\n                total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 1       27   0.8   0.8\n#&gt; 2     3288  99.0  99.8\n#&gt; 3        3   0.1  99.9\n#&gt; 4        4   0.1 100.0\n#&gt; Total 3322 100.0 100.0\nNous allons maintenant produire le tableau de fréquences de la variable seats de la base de données nycflights13. Cette variable correspond au nombre de sièges par avion (pour avoir cette information, vous pouvez utiliser la commande ?nycflights13::planes). Nous avons:\nfreq(planes$seats,\n                cum = TRUE,\n                valid = FALSE,\n                total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 2       16   0.5   0.5\n#&gt; 4        5   0.2   0.6\n#&gt; 5        2   0.1   0.7\n#&gt; 6        3   0.1   0.8\n#&gt; 7        2   0.1   0.8\n#&gt; 8        5   0.2   1.0\n#&gt; 9        1   0.0   1.0\n#&gt; 10       1   0.0   1.1\n#&gt; 11       2   0.1   1.1\n#&gt; 12       1   0.0   1.1\n#&gt; 14       1   0.0   1.2\n#&gt; 16       1   0.0   1.2\n#&gt; 20      80   2.4   3.6\n#&gt; 22       2   0.1   3.7\n#&gt; 55     390  11.7  15.4\n#&gt; 80      83   2.5  17.9\n#&gt; 95     123   3.7  21.6\n#&gt; 100    102   3.1  24.7\n#&gt; 102      1   0.0  24.7\n#&gt; 128      1   0.0  24.7\n#&gt; 139      8   0.2  25.0\n#&gt; 140    411  12.4  37.4\n#&gt; 142    158   4.8  42.1\n#&gt; 145     57   1.7  43.8\n#&gt; 147      3   0.1  43.9\n#&gt; 149    452  13.6  57.5\n#&gt; 172     81   2.4  60.0\n#&gt; 178    283   8.5  68.5\n#&gt; 179    134   4.0  72.5\n#&gt; 182    159   4.8  77.3\n#&gt; 189     73   2.2  79.5\n#&gt; 191     87   2.6  82.1\n#&gt; 199     43   1.3  83.4\n#&gt; 200    256   7.7  91.1\n#&gt; 222     13   0.4  91.5\n#&gt; 255     16   0.5  92.0\n#&gt; 260      4   0.1  92.1\n#&gt; 269      1   0.0  92.1\n#&gt; 275     25   0.8  92.9\n#&gt; 290      6   0.2  93.1\n#&gt; 292     16   0.5  93.6\n#&gt; 300     17   0.5  94.1\n#&gt; 330    114   3.4  97.5\n#&gt; 375      1   0.0  97.5\n#&gt; 377     14   0.4  98.0\n#&gt; 379     55   1.7  99.6\n#&gt; 400     12   0.4 100.0\n#&gt; 450      1   0.0 100.0\n#&gt; Total 3322 100.0 100.0\nComme nous pouvons le constater, le tableau est très grand car la variable seats possède 48 valeurs différentes. Nous allons donc parfois séparer nos valeurs en classes comme nous le verrons au Chapitre 3.",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "tableaux_quantitatives_discretes.html#sec-tabfreqquantdiscr",
    "href": "tableaux_quantitatives_discretes.html#sec-tabfreqquantdiscr",
    "title": "3  Les variables quantitatives discrètes",
    "section": "",
    "text": "Titre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Valeurs)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\n\n\nSi pour la valeur \\(x_i\\) de la variable \\(A\\) la pourcentage cumulé est de \\(b\\) %, ceci signifie que \\(b\\) % des valeurs de la variable \\(A\\) sont plus petites ou égales à \\(x_i\\).\n\n\n\ncum = TRUE; permet d’afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "tableaux_quantitatives_discretes.html#représentation-graphique---le-diagramme-à-bandes",
    "href": "tableaux_quantitatives_discretes.html#représentation-graphique---le-diagramme-à-bandes",
    "title": "3  Les variables quantitatives discrètes",
    "section": "3.2 Représentation graphique - Le diagramme à bandes",
    "text": "3.2 Représentation graphique - Le diagramme à bandes\nLe graphique utilisé pour représenter une variable quantitative discrète est le diagramme à bâtons.\nCe graphique est construit comme le diagramme à bandes rectangulaires verticales, sauf que les rectangles sont remplacés par des bâtons très minces (généralement une simple ligne). Pour modifier la largeur de vos lignes, vous utilisez l’option width dans la commande geom_bar().\n\nggplot(data = planes, aes(x = engines))+\n  geom_bar(width = 0.1)+\n  labs(\n    title = \"Répartition de 3 322 avions selon le nombre de leurs moteurs\",\n    x = \"Nombre de moteurs\",\n    y = \"Nombre d'unités statistiques\"\n  )\n\n\n\n\n\n\n\n\nVous pouvez produire un diagramme à bâtons horizontaux en utilisant la commande coord_flip().\n\nggplot(data = gss_cat, aes(x = tvhours))+\n  geom_bar(width = 0.1)+\n  labs(\n    title = \"Répartition de 11 137 répondants selon le nombre d'heures de télévision écoutées par jour\",\n    x = \"Nombre d'heures de télévision\",\n    y = \"Nombre d'unités statistiques\"\n  )+\n  coord_flip()\n#&gt; Warning: Removed 10146 rows containing non-finite outside the scale range\n#&gt; (`stat_count()`).",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives discrètes</span>"
    ]
  },
  {
    "objectID": "tableaux_quantitatives_continues.html",
    "href": "tableaux_quantitatives_continues.html",
    "title": "3  Les variables quantitatives continues",
    "section": "",
    "text": "3.1 Tableau de fréquences\nLes différentes valeurs d’une variable continue étant impossibles à énumérer, nous devrons regrouper celles-ci en classes. La première colonne sera donc constituée de celles-ci.\nIl sera parfois utile d’ajouter une colonne supplémentaire au tableau habituel: le milieu de classe. Celui-ci est calculé en faisant la moyenne entre le début de classe et la fin de classe.\nLe tableau de fréquences que nous utiliserons est le suivant :\nPour être en mesure de briser une variable en classes, il faut utiliser la commande cut. Les options utilisées sont les suivantes:\nPour ce faire, nous devons utiliser la commande cut qui permet d’indiquer les frontières de ces classes. Voici un exemple où nous créons des classes de largeur 25:\ntemp_classes &lt;- cut(weather$temp,\n                    breaks = c(0, 25, 50, 75, 100, 125),\n                    include.lowest = TRUE,\n                    right = FALSE)\nunique(temp_classes)\n#&gt; [1] [25,50)   [0,25)    [50,75)   [75,100)  [100,125] &lt;NA&gt;     \n#&gt; Levels: [0,25) [25,50) [50,75) [75,100) [100,125]\nNous nous retrouvons donc avec 6 classes. Lorsque nous présenterons les variables sous forme de tableau, il nous sera utile d’utiliser la commande cut.\nL’option include.lowest indique que nous voulons conserver … L’option right = FALSE indique que nous voulons des intervalles fermés à gauche et ouverts à droite.\nPour simplifier le code, nous créons en premier lieu une variable air_time_rec avec les classes et nous l’affichons ensuite avec freq. Remarquons que nous avons ajouté l’option valid = TRUE car certaines valeurs sont manquantes. Rappelons que les données manquantes sont représentées par NA en R. Deux colonnes sont ajoutées:\nNous obtenons donc:\nair_time_rec &lt;- cut(flights$air_time, \n                    include.lowest=TRUE,\n                    right=FALSE,\n                    breaks=c(0, 100, 200, 300, 400, 500, 600, 700))\nfreq(air_time_rec,\n                cum = TRUE,\n                total = TRUE,\n                valid = TRUE)\n#&gt;                n     %  val%  %cum val%cum\n#&gt; [0,100)   105687  31.4  32.3  31.4    32.3\n#&gt; [100,200) 146527  43.5  44.8  74.9    77.0\n#&gt; [200,300)  31036   9.2   9.5  84.1    86.5\n#&gt; [300,400)  43347  12.9  13.2  97.0    99.8\n#&gt; [400,500)     48   0.0   0.0  97.0    99.8\n#&gt; [500,600)    132   0.0   0.0  97.0    99.8\n#&gt; [600,700]    569   0.2   0.2  97.2   100.0\n#&gt; NA          9430   2.8    NA 100.0      NA\n#&gt; Total     336776 100.0 100.0 100.0   100.0\nÀ la section Section 2.1, nous avons vu que la variable seats de la base de données planes contenait 48 valeurs différentes. Nous allons donc créer le tableau de fréquences avec des classes.\nseats_rec &lt;- cut(planes$seats, \n                 include.lowest=TRUE,  \n                 right=FALSE,\n                 breaks=c(0, 50, 100, 150, 200, 250, 300, 350, 400, 450))\nfreq(seats_rec,\n            cum = TRUE,\n            total = TRUE,\n            valid = TRUE)\n#&gt;              n     %  val%  %cum val%cum\n#&gt; [0,50)     122   3.7   3.7   3.7     3.7\n#&gt; [50,100)   596  17.9  17.9  21.6    21.6\n#&gt; [100,150) 1193  35.9  35.9  57.5    57.5\n#&gt; [150,200)  860  25.9  25.9  83.4    83.4\n#&gt; [200,250)  269   8.1   8.1  91.5    91.5\n#&gt; [250,300)   68   2.0   2.0  93.6    93.6\n#&gt; [300,350)  131   3.9   3.9  97.5    97.5\n#&gt; [350,400)   70   2.1   2.1  99.6    99.6\n#&gt; [400,450]   13   0.4   0.4 100.0   100.0\n#&gt; Total     3322 100.0 100.0 100.0   100.0",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives continues</span>"
    ]
  },
  {
    "objectID": "tableaux_quantitatives_continues.html#tableau-de-fréquences",
    "href": "tableaux_quantitatives_continues.html#tableau-de-fréquences",
    "title": "3  Les variables quantitatives continues",
    "section": "",
    "text": "Titre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Classes)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\n\n\n\n\n\n\ninclude.lowest=TRUE: permet d’inclure les valeurs extrèmes\nright=FALSE: permet d’avoir des classes fermées à gauche et ouvertes à droite\nbreaks=c(0, 100, 200, 300, 400, 500, 600, 700): permet de couper les classes à 0, 100, 200, 300, 400, 500, 600 et 700\n\n\n\nval%: le pourcentage en omettant les valeurs manquantes\nval%cum: le pourcentage cumulé en omettant les valeurs manquantes",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives continues</span>"
    ]
  },
  {
    "objectID": "tableaux_quantitatives_continues.html#représentation-graphique---lhistogramme",
    "href": "tableaux_quantitatives_continues.html#représentation-graphique---lhistogramme",
    "title": "3  Les variables quantitatives continues",
    "section": "3.2 Représentation graphique - L’histogramme",
    "text": "3.2 Représentation graphique - L’histogramme\n\nggplot(flights, aes(x = air_time))+\n  geom_histogram(binwidth = 50, center = 25, color = 'white')+\n  labs(\n    title = \"Répartition de 327 346 vols selon le nombre de minutes de vol\",\n    x = \"Nombre de minutes de vol\",\n    y = \"Nombre d'unités statistiques\"\n  )\n#&gt; Warning: Removed 9430 rows containing non-finite outside the scale range\n#&gt; (`stat_bin()`).",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les variables quantitatives continues</span>"
    ]
  },
  {
    "objectID": "graphiques_qualitatives.html",
    "href": "graphiques_qualitatives.html",
    "title": "5  L’extension ggplot2",
    "section": "",
    "text": "5.1 Représentation graphique - Le diagramme à bandes\nPour représenter graphiquement les variables qualitatives, nous allons utiliser les diagrammes à bandes.\nPour construire ce graphique:\nNous allons visualiser le diagramme à bandes de la variable marital provenant de la base de données forcats::gss_cat. Nous devons spécifier:\nLa commande est donc:\nggplot(data = gss_cat, aes(x = marital))+\n  geom_bar()\nPour ajouter un titre et indiquer les titres des axes x et y, nous utilisons la commande labs (pour labels).\nggplot(data = gss_cat, aes(x = marital))+\n  geom_bar()+\n  labs(\n    title = \"Répartition de 21 483 personnes selon leur statut matrimonial\",\n    x = \"Statut matrimonial\",\n    y = \"Nombre d'unités statistiques\"\n  )",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "graphiques_qualitatives.html#représentation-graphique---le-diagramme-à-bandes",
    "href": "graphiques_qualitatives.html#représentation-graphique---le-diagramme-à-bandes",
    "title": "5  L’extension ggplot2",
    "section": "",
    "text": "Chaque modalité est représentée par un rectangle.\nLa hauteur de chaque rectangle doit être proportionnelle\n\nau nombre d’unités statistiques (la fréquence absolue) OU\nau pourcentage d’unités statistiques (la fréquence relative).\n\nLe titre et les fréquences (absolues ou relatives) doivent être indiqués.\nL’axe des x doit posséder un titre : le nom de la variable étudiée.\nL’axe des y doit posséder un titre : “Nombre d’unités statistiques” ou “Pourcentage d’unités statistiques”.\nLa graduation de l’axe des y doit commencer à zéro (l’axe ne doit pas être coupé).\nLes rectangles doivent être équidistants et de largeur égale. De plus, ils ne doivent pas être collés.\n5.1.1 La variable marital\n\n\n\ndata = gss_cat: la base de données.\naes(x = marital): la variable étudiée.\ngeom_bar(): nous voulons un diagramme à bandes\n\n\n\n\n\n\n5.1.2 La variable relig\nNous pouvons afficher le diagramme à bandes horizontales de la variable relig en ajoutant la commande coord_flip(). Nous avons donc:\n\nggplot(data = gss_cat, aes(x = relig))+\n  geom_bar()+\n  labs(\n    title = \"Répartition de 21 483 personnes selon leur religion\",\n    x = \"Religion\",\n    y = \"Nombre d'unités statistiques\"\n  )+\n  coord_flip()",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#les-divers-types-de-geom",
    "href": "ggplot2.html#les-divers-types-de-geom",
    "title": "4  L’extension ggplot2",
    "section": "4.3 Les divers types de geom",
    "text": "4.3 Les divers types de geom\n\n4.3.1 geom_bar et geom_col\ngeom_bar permet de produire un diagramme à bandes. On lui passe en x la variable qualitative dont on souhaite représenter l’effectif de chaque modalité.\nPar exemple, si on veut afficher le nombre de personnes selon leur orientation politique:\n\nggplot(gss_cat) +\n    geom_bar(aes(x = partyid))\n\n\n\n\n\n\n\n\nSi on préfère avoir un graphique en barres horizontales (par exemple pour mieux visualiser les modalités), il suffit de passer la variable comme attribut y plutôt que x.\n\nggplot(gss_cat) +\n    geom_bar(aes(y = partyid))\n\n\n\n\n\n\n\n\nUne autre possibilité est d’utiliser coord_flip(), qui permet d’intervertir l’axe horizontal et l’axe vertical.\n\nggplot(gss_cat) +\n    geom_bar(aes(x = partyid))\n\n\n\n\n\n\n\n    coord_flip()\n#&gt; &lt;ggproto object: Class CoordFlip, CoordCartesian, Coord, gg&gt;\n#&gt;     aspect: function\n#&gt;     backtransform_range: function\n#&gt;     clip: on\n#&gt;     default: FALSE\n#&gt;     distance: function\n#&gt;     expand: TRUE\n#&gt;     is_free: function\n#&gt;     is_linear: function\n#&gt;     labels: function\n#&gt;     limits: list\n#&gt;     modify_scales: function\n#&gt;     range: function\n#&gt;     render_axis_h: function\n#&gt;     render_axis_v: function\n#&gt;     render_bg: function\n#&gt;     render_fg: function\n#&gt;     setup_data: function\n#&gt;     setup_layout: function\n#&gt;     setup_panel_guides: function\n#&gt;     setup_panel_params: function\n#&gt;     setup_params: function\n#&gt;     train_panel_guides: function\n#&gt;     transform: function\n#&gt;     super:  &lt;ggproto object: Class CoordFlip, CoordCartesian, Coord, gg&gt;\n\nÀ noter que coord_flip() peut s’appliquer à n’importe quel graphique ggplot2.\n\nggplot(gss_cat) +\n    geom_line(aes(x = age, y = tvhours))\n#&gt; Warning: Removed 78 rows containing missing values or values outside the scale range\n#&gt; (`geom_line()`).\n\n\n\n\n\n\n\n    coord_flip()\n#&gt; &lt;ggproto object: Class CoordFlip, CoordCartesian, Coord, gg&gt;\n#&gt;     aspect: function\n#&gt;     backtransform_range: function\n#&gt;     clip: on\n#&gt;     default: FALSE\n#&gt;     distance: function\n#&gt;     expand: TRUE\n#&gt;     is_free: function\n#&gt;     is_linear: function\n#&gt;     labels: function\n#&gt;     limits: list\n#&gt;     modify_scales: function\n#&gt;     range: function\n#&gt;     render_axis_h: function\n#&gt;     render_axis_v: function\n#&gt;     render_bg: function\n#&gt;     render_fg: function\n#&gt;     setup_data: function\n#&gt;     setup_layout: function\n#&gt;     setup_panel_guides: function\n#&gt;     setup_panel_params: function\n#&gt;     setup_params: function\n#&gt;     train_panel_guides: function\n#&gt;     transform: function\n#&gt;     super:  &lt;ggproto object: Class CoordFlip, CoordCartesian, Coord, gg&gt;",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#exemples-de-geom",
    "href": "ggplot2.html#exemples-de-geom",
    "title": "2  L’extension ggplot2",
    "section": "2.3 Exemples de geom",
    "text": "2.3 Exemples de geom\nIl existe un grand nombre de geom, décrits en détail dans la documentation officielle. Outre les geom_histogram et geom_point que l’on vient de voir, on pourra noter les geom suivants.\n\n2.3.1 geom_boxplot\ngeom_boxplot permet de représenter des boîtes à moustaches. On lui passe en y la variable numérique dont on veut étudier la répartition, et en x la variable qualitative contenant les classes qu’on souhaite comparer. Ainsi, si on veut comparer la répartition du pourcentage de maisons en fonction du département de la commune, on pourra faire :\n\nggplot(rp) +\n    geom_boxplot(aes(x = departement, y = maison))\n\n\n\n\n\n\n\n\nOn peut personnaliser la présentation avec différents argument supplémentaires comme fill ou color :\n\nggplot(rp) +\n    geom_boxplot(\n        aes(x = departement, y = maison),\n        fill = \"wheat\", color = \"tomato4\"\n    )\n\n\n\n\n\n\n\n\nUn autre argument utile, varwidth, permet de faire varier la largeur des boîtes en fonction des effectifs de la classe (donc, ici, en fonction du nombre de communes de chaque département) :\n\nggplot(rp) +\n    geom_boxplot(\n        aes(x = departement, y = maison), \n        varwidth = TRUE)\n\n\n\n\n\n\n\n\n\n\n2.3.2 geom_violin\ngeom_violin est très semblable à geom_boxplot, mais utilise des graphes en violon à la place des boîtes à moustache.\n\nggplot(rp) +\n    geom_violin(aes(x = departement, y = maison))\n\n\n\n\n\n\n\n\nLes graphes en violon peuvent donner une lecture plus fine des différences de distribution selon les classes. Comme pour les graphiques de densité, on peut faire varier le niveau de “détail” de la représentation en utilisant l’argument bw (bande passante).\n\nggplot(rp) +\n    geom_violin(\n        aes(x = departement, y = maison),\n        bw = 2\n    )\n\n\n\n\n\n\n\n\n\n\n2.3.3 geom_bar et geom_col\ngeom_bar permet de produire un graphique en bâtons (barplot). On lui passe en x la variable qualitative dont on souhaite représenter l’effectif de chaque modalité.\nPar exemple, si on veut afficher le nombre de communes de notre jeu de données pour chaque département :\n\nggplot(rp) +\n    geom_bar(aes(x = departement))\n\n\n\n\n\n\n\n\nSi on préfère avoir un graphique en barres horizontales, il suffit de passer la variable comme attribut y plutôt que x.\n\nggplot(rp) +\n    geom_bar(aes(y = departement))\n\n\n\n\n\n\n\n\nUne autre possibilité est d’utiliser coord_flip(), qui permet d’intervertir l’axe horizontal et l’axe vertical.\n\nggplot(rp) +\n    geom_bar(aes(x = departement)) +\n    coord_flip()\n\n\n\n\n\n\n\n\nÀ noter que coord_flip() peut s’appliquer à n’importe quel graphique ggplot2.\n\n\n2.3.4 geom_histogram\ngeom_histogram permet de représenter des histogrammes. On lui passe en x la variable quantitative dont on souhiate étudier la répartition.\n\nggplot(rp) +\n    geom_histogram(aes(x = cadres))\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nOn peut utiliser différents arguments, comme par exemple binwidth pour spécifier la largeur des rectangles de notre histogramme.\n\nggplot(rp) +\n    geom_histogram(aes(x = cadres), binwidth = 5)\n\n\n\n\n\n\n\n\n\n\n2.3.5 geom_freqpoly\ngeom_freqpoly permet d’afficher le polygone de fréquences d’une variable numérique. Son usage est similaire à celui de geom_histogram.\nAinsi, si on veut afficher le polygone de fréquences de la part des cadres dans les communes de notre jeu de données :\n\nggplot(rp) +\n    geom_freqpoly(aes(x = cadres))\n#&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nOn peut utiliser différents arguments pour ajuster le calcul de l’estimation de densité, parmi lesquels kernel et bw (voir la page d’aide de la fonction density pour plus de détails). bw (abbréviation de bandwidth, bande passante) permet de régler la “finesse” de l’estimation de densité, un peu comme le choix du nombre de classes dans un histogramme :\n\nggplot(rp) +\n    geom_freqpoly(aes(x = cadres), binwidth = 5)\n\n\n\n\n\n\n\n\n\n\n2.3.6 geom_line\ngeom_line trace des lignes connectant les différentes observations entre elles. Il est notamment utilisé pour la représentation de séries temporelles. On passe à geom_line deux paramètres : x et y. Les observations sont alors connectées selon l’ordre des valeurs passées en x.\nComme il n’y a pas de données adaptées pour ce type de représentation dans notre jeu de données d’exemple, on va utiliser ici le jeu de données economics inclus dans ggplot2 et représenter l’évolution du taux de chômage aux États-Unis (variable unemploy) dans le temps (variable date) :\n\ndata(\"economics\")\neconomics\n#&gt; # A tibble: 574 × 6\n#&gt;    date         pce    pop psavert uempmed unemploy\n#&gt;    &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n#&gt;  1 1967-07-01  507. 198712    12.6     4.5     2944\n#&gt;  2 1967-08-01  510. 198911    12.6     4.7     2945\n#&gt;  3 1967-09-01  516. 199113    11.9     4.6     2958\n#&gt;  4 1967-10-01  512. 199311    12.9     4.9     3143\n#&gt;  5 1967-11-01  517. 199498    12.8     4.7     3066\n#&gt;  6 1967-12-01  525. 199657    11.8     4.8     3018\n#&gt;  7 1968-01-01  531. 199808    11.7     5.1     2878\n#&gt;  8 1968-02-01  534. 199920    12.3     4.5     3001\n#&gt;  9 1968-03-01  544. 200056    11.7     4.1     2877\n#&gt; 10 1968-04-01  544  200208    12.3     4.6     2709\n#&gt; # ℹ 564 more rows\n\n\nggplot(economics) +\n    geom_line(aes(x = date, y = unemploy))",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#mappages",
    "href": "ggplot2.html#mappages",
    "title": "2  L’extension ggplot2",
    "section": "2.4 Mappages",
    "text": "2.4 Mappages\nUn mappage, dans ggplot2, est une mise en relation entre un attribut graphique du geom (position, couleur, taille…) et une variable du tableau de données.\nCes mappages sont passés aux différents geom via la fonction aes() (abbréviation d’aesthetic).\n\n2.4.1 Exemples de mappages\nOn a déjà vu les mappages x et y pour un nuage de points. Ceux-ci signifient que la position d’un point donné horizontalement (x) et verticalement (y) dépend de la valeur des variables passées comme arguments x et y dans aes().\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres)\n    )\n\n\n\n\n\n\n\n\nMais on peut ajouter d’autres mappages. Par exemple, color permet de faire varier la couleur des points automatiquement en fonction des valeurs d’une troisième variable. Ainsi, on peut vouloir colorer les points selon le département de la commune correspondante.\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres, color = departement)\n    )\n\n\n\n\n\n\n\n\nOn peut aussi faire varier la taille des points avec size. Ici, la taille dépend de la population totale de la commune :\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres, color = departement, size = pop_tot)\n    )\n\n\n\n\n\n\n\n\nOn peut même associer la transparence des points à une variable avec alpha :\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres, color = departement, size = pop_tot, alpha = maison)\n    )\n\n\n\n\n\n\n\n\nChaque geom possède sa propre liste de mappages.\n\n\n2.4.2 aes() or not aes() ?\nComme on l’a déjà vu, parfois on souhaite changer un attribut sans le relier à une variable : c’est le cas par exemple si on veut représenter tous les points en rouge. Dans ce cas on utilise toujours l’attribut color, mais comme il ne s’agit pas d’un mappage, on le définit à l’extérieur de la fonction aes().\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres),\n        color = \"red\"\n    )\n\n\n\n\n\n\n\n\nPar contre, si on veut faire varier la couleur en fonction des valeurs prises par une variable, on réalise un mappage, et on doit donc placer l’attribut color à l’intérieur de aes().\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres, color = departement)\n    )\n\n\n\n\n\n\n\n\nOn peut mélanger attributs liés à une variable (mappage, donc dans aes()) et attributs constants (donc à l’extérieur). Dans l’exemple suivant, la taille varie en fonction de la variable pop_tot, mais la couleur est constante pour tous les points.\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres, size = pop_tot),\n        color = \"royalblue\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAvertissement\n\n\n\nLa règle est donc simple mais très importante :\nSi on établit un lien entre les valeurs d’une variable et un attribut graphique, on définit un mappage, et on le déclare dans aes(). Sinon, on modifie l’attribut de la même manière pour tous les points, et on le définit en-dehors de la fonction aes().\n\n\n\n\n2.4.3 geom_bar et position\nUn des mappages possibles de geom_bar est l’attribut fill, qui permet de tracer des barres de couleur différentes selon les modalités d’une deuxième variable :\n\nggplot(rp) +\n    geom_bar(aes(x = departement, fill = pop_cl))\n\n\n\n\n\n\n\n\nL’attribut position de geom_bar permet d’indiquer comment les différentes barres doivent être positionnées. Par défaut l’argument vaut position = \"stack\" et elles sont donc “empilées”. Mais on peut préciser position = \"dodge\" pour les mettre côte à côte.\n\nggplot(rp) +\n    geom_bar(\n        aes(x = departement, fill = pop_cl),\n        position = \"dodge\"\n    )\n\n\n\n\n\n\n\n\nOu encore position = \"fill\" pour représenter non plus des effectifs, mais des proportions.\n\nggplot(rp) +\n    geom_bar(\n        aes(x = departement, fill = pop_cl),\n        position = \"fill\"\n    )\n\n\n\n\n\n\n\n\nLà encore, on peut utiliser coord_flip() si on souhaite une visualisation avec des barres horizontales.\n\nggplot(rp) +\n    geom_bar(\n        aes(x = departement, fill = pop_cl),\n        position = \"fill\"\n    ) +\n    coord_flip()",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#représentation-de-plusieurs-geom",
    "href": "ggplot2.html#représentation-de-plusieurs-geom",
    "title": "2  L’extension ggplot2",
    "section": "2.5 Représentation de plusieurs geom",
    "text": "2.5 Représentation de plusieurs geom\nOn peut représenter plusieurs geom simultanément sur un même graphique, il suffit de les ajouter à tour de rôle avec l’opérateur +.\nPar exemple, on peut superposer la position des points au-dessus d’un boxplot. On va pour cela ajouter un geom_point après avoir ajouté notre geom_boxplot.\n\nggplot(rp) +\n    geom_boxplot(aes(x = departement, y = maison)) +\n    geom_point(\n        aes(x = departement, y = maison),\n        col = \"red\", alpha = 0.2\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuand une commande ggplot2 devient longue, il peut être plus lisible de la répartir sur plusieurs lignes. Dans ce cas, il faut penser à placer l’opérateur + en fin de ligne, afin que R comprenne que la commande n’est pas complète et qu’il prenne en compte la suite.\n\n\nPour un résultat un peu plus lisible, on peut remplacer geom_point par geom_jitter, qui disperse les points horizontalement et facilite leur visualisation.\n\nggplot(rp) +\n    geom_boxplot(aes(x = departement, y = maison)) +\n    geom_jitter(\n        aes(x = departement, y = maison),\n        col = \"red\", alpha = 0.2\n    )\n\n\n\n\n\n\n\n\nPour simplifier un peu le code, plutôt que de déclarer les mappages dans chaque geom, on peut les déclarer dans l’appel à ggplot(). Ils seront automatiquement “hérités” par les geom ajoutés (sauf s’ils redéfinissent les mêmes mappages).\n\nggplot(rp, aes(x = departement, y = maison)) +\n    geom_boxplot() +\n    geom_jitter(color = \"red\", alpha = 0.2)\n\n\n\n\n\n\n\n\nAutre exemple, on peut vouloir ajouter à un nuage de points une ligne de régression linéaire à l’aide de geom_smooth :\n\nggplot(rp, aes(x = dipl_sup, y = cadres)) +\n    geom_point(alpha = 0.2) +\n    geom_smooth(method = \"lm\")\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nEt on peut même superposer une troisième visualisation de la répartition des points dans l’espace avec geom_density2d :\n\nggplot(rp, aes(x = dipl_sup, y = cadres)) +\n    geom_point(alpha = 0.2) +\n    geom_density2d(color = \"red\") +\n    geom_smooth(method = \"lm\")\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nOn peut enfin superposer l’histogramme ainsi que le polygone de fréquences.\n\nggplot(rp) +\n    geom_histogram(aes(x = cadres), binwidth = 1) +\n    geom_freqpoly(aes(x = cadres), binwidth = 1)",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#faceting",
    "href": "ggplot2.html#faceting",
    "title": "2  L’extension ggplot2",
    "section": "2.6 Faceting",
    "text": "2.6 Faceting\nLe faceting permet d’effectuer plusieurs fois le même graphique selon les valeurs d’une ou plusieurs variables qualitatives.\nPar exemple, on a vu qu’on peut représenter l’histogramme du pourcentage de cadres dans nos communes avec le code suivant :\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres))\n\n\n\n\n\n\n\n\nOn souhaite comparer cette distribution de la part des cadres selon le département, et donc faire un histogramme pour chacun de ces départements. C’est ce que permettent les fonctions facet_wrap et facet_grid.\nfacet_wrap prend un paramètre de la forme vars(variable), où variable est le nom de la variable en fonction de laquelle on souhaite faire les différents graphiques. Ceux-ci sont alors affichés les uns à côté des autres et répartis automatiquement dans la page.\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    facet_wrap(vars(departement))\n\n\n\n\n\n\n\n\nPour facet_grid, les graphiques sont disposés selon une grille. La fonction prend alors deux arguments, rows et cols, auxquels on passe les variables à afficher en ligne ou en colonne via la fonction vars().\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    facet_grid(rows = vars(departement))\n\n\n\n\n\n\n\n\nUn des intérêts du faceting dans ggplot2 est que tous les graphiques générés ont les mêmes échelles, ce qui permet une comparaison directe.\nEnfin, notons qu’on peut même faire du faceting sur plusieurs variables à la fois. On peut par exemple faire des histogrammes de la répartition de la part des cadres pour chaque croisement des variables departement et pop_cl :\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    facet_grid(\n        rows = vars(departement), cols = vars(pop_cl)\n    )\n\n\n\n\n\n\n\n\nL’histogramme en haut à gauche représente la répartition du pourcentage de cadres parmi les communes de 2000 à 3000 habitants dans les Bouches-du-Rhône, etc.",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#scales",
    "href": "ggplot2.html#scales",
    "title": "4  L’extension ggplot2",
    "section": "4.6 Scales",
    "text": "4.6 Scales\nOn a vu qu’avec ggplot2 on définit des mappages entre des attributs graphiques (position, taille, couleur, etc.) et des variables d’un tableau de données. Ces mappages sont définis, pour chaque geom, via la fonction aes().\nLes scales dans ggplot2 permettent de modifier la manière dont un attribut graphique va être relié aux valeurs d’une variable, et dont la légende correspondante va être affichée. Par exemple, pour l’attribut color, on pourra définir la palette de couleur utilisée. Pour size, les tailles minimales et maximales, etc.\nPour modifier une scale existante, on ajoute un nouvel élément à notre objet ggplot2 avec l’opérateur +. Cet élément prend la forme scale_&lt;attribut&gt;_&lt;type&gt;.\nVoyons tout de suite quelques exemples.\n\n4.6.1 scale_size\nSi on souhaite modifier les tailles minimales et maximales des objets quand on a effectué un mappage de type size, on peut utiliser la fonction scale_size et son argument range.\n\nggplot(rp) +\n    geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot)) +\n    scale_size(range = c(0, 20))\n\n\n\n\n\n\n\n\nÀ comparer par exemple à :\n\nggplot(rp) +\n    geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot)) +\n    scale_size(range = c(2, 8))\n\n\n\n\n\n\n\n\nOn peut ajouter d’autres paramètres à scale_size. Le premier argument est toujours le titre donné à la légende.\n\nggplot(rp) +\n    geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot)) +\n    scale_size(\n        \"Population\",\n        range = c(0, 15)\n    )\n\n\n\n\n\n\n\n\nOn peut aussi définir manuellement les éléments de légende représentés.\n\nggplot(rp) +\n    geom_point(aes(x = dipl_sup, y = cadres, size = pop_tot)) +\n    scale_size(\n        \"Population\",\n        range = c(0, 15),\n        breaks = c(1000, 5000, 10000, 50000)\n    )",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#thèmes",
    "href": "ggplot2.html#thèmes",
    "title": "4  L’extension ggplot2",
    "section": "4.7 Thèmes",
    "text": "4.7 Thèmes\nLes thèmes permettent de contrôler l’affichage de tous les éléments du graphique qui ne sont pas reliés aux données : titres, grilles, fonds, etc.\nIl existe un certain nombre de thèmes préexistants, par exemple le thème theme_bw :\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    theme_bw()\n\n\n\n\n\n\n\n\nOu le thème theme_minimal :\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    theme_minimal()\n\n\n\n\n\n\n\n\nOn peut cependant modifier manuellement les différents éléments. Par exemple, les fonctions ggtitle, xlab et ylab permettent d’ajouter ou de modifier le titre du graphique, ainsi que les étiquettes des axes x et y :\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    ggtitle(\"Un bien bel histogramme\") +\n    xlab(\"Pourcentage de cadres\") +\n    ylab(\"Effectif\")\n\n\n\n\n\n\n\n\nLes éléments personnalisables étant nombreux, un bon moyen de se familiariser avec tous les arguments est sans doute l’addin RStudio ggThemeAssist. Pour l’utiliser il suffit d’installer le package du même nom, de sélectionner dans son script RStudio le code correspondant à un graphique ggplot2, puis d’aller dans le menu Addins et choisir ggplot Theme Assistant. Une interface graphique s’affiche alors permettant de modifier les différents éléments. Si on clique sur Done, le code sélectionné dans le script est alors automatiquement mis à jour pour correspondre aux modifications effectuées.\nCe qui permet d’obtenir très facilement des résultats extrêmement moches :\n\nggplot(data = rp) +\n    geom_histogram(aes(x = cadres)) +\n    theme(\n        panel.grid.major = element_line(\n            colour = \"dodgerblue\",\n            size = 0.5, linetype = \"dotdash\"\n        ), axis.title = element_text(\n            family = \"serif\",\n            size = 18, face = \"italic\", colour = \"white\"\n        ),\n        axis.text = element_text(\n            family = \"serif\",\n            size = 15, face = \"bold\"\n        ), axis.text.x = element_text(family = \"mono\"),\n        plot.title = element_text(family = \"serif\"),\n        legend.text = element_text(family = \"serif\"),\n        legend.title = element_text(family = \"serif\"),\n        panel.background = element_rect(fill = \"coral\"),\n        plot.background = element_rect(fill = \"blueviolet\")\n    )",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#ladd-in-esquisse",
    "href": "ggplot2.html#ladd-in-esquisse",
    "title": "4  L’extension ggplot2",
    "section": "4.8 L’add-in esquisse",
    "text": "4.8 L’add-in esquisse\nesquisse est un package développé notamment par Victor Perrier de dreamRs et qui fournit une interface graphique pour la construction de graphiques avec ggplot2.\nPour l’utiliser, il faut évidemment préalablement installer l’extension :\n\ninstall.packages(\"esquisse\")\n\nPour lancer l’interface, ouvrez le menu Addins dans la barre d’outils de RStudio, et cliquez sur ‘ggplot2’ builder1.\n\nUne fenêtre s’ouvre : la première étape consiste à choisir un data frame de votre environnement, et éventuellement à ne sélectionner que certaines de ses variables.\n Une fois le choix effectué, cliquez sur Validate imported data.\nL’interface principale s’affiche alors. La liste des variables du data frame apparaît en haut, et vous pouvez les faire glisser dans les zones X, Y, Fill, Color, Size et Facet pour créer des mappages. Le graphique se met automatiquement à jour.\n\nPar défaut, esquisse sélectionne le type de graphique le plus approprié selon la nature de vos variables. Mais vous pouvez choisir un autre type de graphique à l’aide de l’icône en haut à gauche, parmi onze disponibles (dont Auto):\n.\nEnfin, une série de menus en bas de l’interface vous permet de personnaliser les titres, les annotations (labels), la présentation ou de filtrer des valeurs de vos variables.\nQuand vous avez généré un graphique que vous souhaitez conserver, ouvrez le menu Export & code :\n\nVous y trouverez le code R correspondant au graphique actuellement affiché. Vous pouvez dès lors le copier pour le coller dans votre script, ou cliquer sur Insert code in script pour l’insérer directement dans votre script à l’endroit où se trouve votre curseur.\nesquisse ne propose pas (encore) tous les geom ou toutes les possibilités de ggplot2, mais ça peut être un outil très utile et pratique pour une exploration rapide de données ou lorsqu’on est un peu perdu dans la syntaxe et les fonctions de l’extension.\nPour plus d’informations, vous pouvez vous référer à la page du projet sur GitHub (en anglais).",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#ressources",
    "href": "ggplot2.html#ressources",
    "title": "2  L’extension ggplot2",
    "section": "2.7 Ressources",
    "text": "2.7 Ressources\nLa documentation officielle (en anglais) de ggplot2 est très complète et accessible en ligne.\nUne “antisèche” (en anglais) résumant en deux pages l’ensemble des fonctions et arguments et disponible soit directement depuis RStudio (menu Help &gt; Cheatsheets &gt; Data visualization with ggplot2) ou en ligne.\nLes parties Data visualisation et Graphics for communication de l’ouvrage en ligne R for data science, de Hadley Wickham, sont une très bonne introduction à ggplot2.\nPlusieurs ouvrages, toujours en anglais, abordent en détail l’utilisation de ggplot2, en particulier ggplot2: Elegant Graphics for Data Analysis, toujours de Hadley Wickham, et le R Graphics Cookbook de Winston Chang.\nLe site associé à ce dernier ouvrage comporte aussi pas mal d’exemples et d’informations intéressantes.\nEnfin, si ggplot2 présente déjà un très grand nombre de fonctionnalités, il existe aussi un système d’extensions permettant d’ajouter des geom, des thèmes, etc. Le site ggplot2 extensions est une très bonne ressource pour les parcourir et les découvrir, notamment grâce à sa galerie.",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#exercices",
    "href": "ggplot2.html#exercices",
    "title": "4  L’extension ggplot2",
    "section": "4.10 Exercices",
    "text": "4.10 Exercices\nPour les exercices qui suivent, on commence par charger les extensions nécessaires et les données du jeu de données rp2018. On crée alors un objet rp69 comprenant uniquement les communes du Rhône et de la Loire.\n\nlibrary(tidyverse)\nlibrary(questionr)\ndata(rp2018)\n\nrp69 &lt;- filter(rp2018, departement %in% c(\"Rhône\", \"Loire\"))\n\nExercice 1\nFaire un nuage de points croisant le pourcentage de sans diplôme (dipl_aucun) et le pourcentage d’ouvriers (ouvr).\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = dipl_aucun, y = ouvr))\n\n\nExercice 2\nFaire un nuage de points croisant le pourcentage de sans diplôme et le pourcentage d’ouvriers, avec les points en rouge et de transparence 0.2.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = dipl_aucun, y = ouvr), color = \"red\", alpha = 0.2)\n\n\nExercice 3\nReprésenter la répartition du pourcentage de propriétaires (variable proprio) selon la taille de la commune en classes (variable pop_cl) sous forme de boîtes à moustaches.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_boxplot(aes(x = pop_cl, y = proprio))\n\n\nExercice 4\nReprésenter la répartition du nombre de communes selon la taille de la commune en classes sous la forme d’un diagramme en bâtons.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_bar(aes(x = pop_cl))\n\n\nExercice 5\nFaire un nuage de points croisant le pourcentage de sans diplôme et le pourcentage d’ouvriers. Faire varier la couleur selon le département (departement).\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = dipl_aucun, y = ouvr, color = departement))\n\n\nSur le même graphique, faire varier la taille des points selon la population totale de la commune (pop_tot).\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = dipl_aucun, y = ouvr, color = departement, size = pop_tot))\n\n\nEnfin, toujours sur le même graphique, rendre les points transparents en plaçant leur opacité à 0.5.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = dipl_aucun, y = ouvr, color = departement, size = pop_tot), alpha = 0.5)\n\n\nExercice 6\nReprésenter la répartition du pourcentage de propriétaires (variable proprio) selon la taille de la commune en classes (variable pop_cl) sous forme de boîtes à moustaches. Faire varier la couleur de remplissage (attribut fill) selon le département.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_boxplot(aes(x = pop_cl, y = proprio, fill = departement))\n\n\nExercice 7\nReprésenter la répartition du nombre de communes selon la taille de la commune en classes (variable pop_cl) sous forme de diagramme en bâtons empilés, avec une couleur différente selon le département.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_bar(aes(x = pop_cl, fill = departement))\n\n\nFaire varier la valeur du paramètre position pour afficher les barres les unes à côté des autres.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_bar(aes(x = pop_cl, fill = departement),\n        position = \"dodge\"\n    )\n\n\nChanger à nouveau la valeur du paramètre position pour représenter les proportions de communes de chaque département pour chaque catégorie de taille.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_bar(aes(x = pop_cl, fill = departement),\n        position = \"fill\"\n    )\n\n\nExercice 8\nFaire un nuage de points représentant en abscisse le pourcentage de cadres (cadres) et en ordonnée le pourcentage de diplômés du supérieur (dipl_sup). Représenter ce nuage par deux graphiques différents selon le département en utilisant facet_grid.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = cadres, y = dipl_sup)) +\n    facet_grid(cols = vars(departement))\n\n\nSur le même graphique, faire varier la taille des points selon la population totale de la communes (variable pop_tot) et rendre les points transparents.\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69) +\n    geom_point(aes(x = cadres, y = dipl_sup, size = pop_tot), alpha = 0.5) +\n    facet_grid(cols = vars(departement))\n\n\nExercice 9\nFaire le nuage de points croisant pourcentage de chômeurs (chom) et pourcentage de sans diplôme. Y ajouter les noms des communes correspondant (variable commune), en rouge et en taille 2.5 :\n\n\n\n\n\n\n\n\n\n\n\nggplot(rp69, aes(x = chom, y = dipl_aucun)) +\n    geom_point() +\n    geom_text(aes(label = commune), color = \"red\", size = 2.5)\n\n\nExercice 10\nDans le graphique précédent, n’afficher que le nom des communes ayant plus de 15% de chômage.\n\n\n\n\n\n\n\n\n\n\n\nchom15 &lt;- filter(rp69, chom &gt; 15)\nggplot(rp69, aes(x = chom, y = dipl_aucun)) +\n    geom_point(alpha = 0.15) +\n    geom_text(data = chom15, aes(label = commune), color = \"red\", size = 3)",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#footnotes",
    "href": "ggplot2.html#footnotes",
    "title": "4  L’extension ggplot2",
    "section": "",
    "text": "Vous pouvez aussi lancer la commande esquisser::esquisse() dans la Console.↩︎",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#les-titres",
    "href": "ggplot2.html#les-titres",
    "title": "2  L’extension ggplot2",
    "section": "2.2 Les titres",
    "text": "2.2 Les titres\nPour ajouter un titre à votre graphique et pour ajouter des titres à vos axes x et y, nous utilisons la commande labs().\n\nggplot(rp) +\n    geom_point(\n        aes(x = dipl_sup, y = cadres)\n    ) +\n    labs(\n        title = \"Un titre magnifique\",\n        x = \"Le nombre d'années de scolarité\",\n        y = \"Le pourcentage de cadres dans la population acitve\"\n    )",
    "crumbs": [
      "Les graphiques",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>L'extension `ggplot2`</span>"
    ]
  },
  {
    "objectID": "tableaux.html",
    "href": "tableaux.html",
    "title": "1  Les tableaux",
    "section": "",
    "text": "1.1 Tableau de fréquences à une variable",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les tableaux</span>"
    ]
  },
  {
    "objectID": "tableaux.html#tableau-de-fréquences-à-une-variable",
    "href": "tableaux.html#tableau-de-fréquences-à-une-variable",
    "title": "1  Les tableaux",
    "section": "",
    "text": "1.1.1 Les variables qualitatives\nLe tableau de fréquences que nous utiliserons est le suivant:\n\n\n\n\n\n\n\n\nTitre\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\n\n\n(Modalités)\n(Fréquences absolues)\n(Fréquences relatives)\n\n\nTotal\nn\n100%\n\n\n\n\nImportant : Le titre doit toujours être indiqué lors de la construction d’un tableau de fréquence.\n\nLorsque les données se trouvent dans une tibble dans R, il est possible d’utiliser la commande freq de la librairie questionr pour afficher le tableau de fréquences. La commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\n\ncum = FALSE; permet de ne pas afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total\n\nDans la base de données nycflights13::planes, nous allons afficher la variable engine, qui correspond au type de moteur de l’avion.\n\nfreq(planes$engine,cum = FALSE,valid = FALSE,total = TRUE)\n#&gt;                  n     %\n#&gt; 4 Cycle          2   0.1\n#&gt; Reciprocating   28   0.8\n#&gt; Turbo-fan     2750  82.8\n#&gt; Turbo-jet      535  16.1\n#&gt; Turbo-prop       2   0.1\n#&gt; Turbo-shaft      5   0.2\n#&gt; Total         3322 100.0\n\n\n\n1.1.2 Les variables quantitatives discrètes\nLe tableau de fréquences que nous utiliserons est le suivant :\n\n\n\n\n\n\n\n\n\nTitre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Valeurs)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\nLe pourcentage cumulé permet de déterminer le pourcentage des répondants qui ont indiqué la valeur correspondante, ou une plus petite. Il sert à donner une meilleure vue d’ensemble.\n\nSi pour la valeur \\(x_i\\) de la variable \\(A\\) la pourcentage cumulé est de \\(b\\) %, ceci signifie que \\(b\\) % des valeurs de la variable \\(A\\) sont plus petites ou égales à \\(x_i\\).\n\nLa commande freq prend comme argument la variable dont vous voulez produire le tableau de fréquences. Pour obtenir une sortie adéquate, il faut ajouter trois options à la commande:\n\ncum = TRUE; permet d’afficher les pourcentages cumulés\nvalid = FALSE; permet de ne pas afficher les données manquantes\ntotal = TRUE; permet d’afficher le total\n\nDans la base de données nycflights13::planes, nous allons afficher la variable engines, qui correspond au nombre de moteurs de l’avion.\n\nfreq(planes$engines,cum = TRUE,valid = FALSE,total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 1       27   0.8   0.8\n#&gt; 2     3288  99.0  99.8\n#&gt; 3        3   0.1  99.9\n#&gt; 4        4   0.1 100.0\n#&gt; Total 3322 100.0 100.0\n\nDans la base de données nycflights13::planes, nous allons afficher la variable seats, qui correspond au nombre de sièges de l’avion.\n\nfreq(planes$seats,cum = TRUE,valid = FALSE,total = TRUE)\n#&gt;          n     %  %cum\n#&gt; 2       16   0.5   0.5\n#&gt; 4        5   0.2   0.6\n#&gt; 5        2   0.1   0.7\n#&gt; 6        3   0.1   0.8\n#&gt; 7        2   0.1   0.8\n#&gt; 8        5   0.2   1.0\n#&gt; 9        1   0.0   1.0\n#&gt; 10       1   0.0   1.1\n#&gt; 11       2   0.1   1.1\n#&gt; 12       1   0.0   1.1\n#&gt; 14       1   0.0   1.2\n#&gt; 16       1   0.0   1.2\n#&gt; 20      80   2.4   3.6\n#&gt; 22       2   0.1   3.7\n#&gt; 55     390  11.7  15.4\n#&gt; 80      83   2.5  17.9\n#&gt; 95     123   3.7  21.6\n#&gt; 100    102   3.1  24.7\n#&gt; 102      1   0.0  24.7\n#&gt; 128      1   0.0  24.7\n#&gt; 139      8   0.2  25.0\n#&gt; 140    411  12.4  37.4\n#&gt; 142    158   4.8  42.1\n#&gt; 145     57   1.7  43.8\n#&gt; 147      3   0.1  43.9\n#&gt; 149    452  13.6  57.5\n#&gt; 172     81   2.4  60.0\n#&gt; 178    283   8.5  68.5\n#&gt; 179    134   4.0  72.5\n#&gt; 182    159   4.8  77.3\n#&gt; 189     73   2.2  79.5\n#&gt; 191     87   2.6  82.1\n#&gt; 199     43   1.3  83.4\n#&gt; 200    256   7.7  91.1\n#&gt; 222     13   0.4  91.5\n#&gt; 255     16   0.5  92.0\n#&gt; 260      4   0.1  92.1\n#&gt; 269      1   0.0  92.1\n#&gt; 275     25   0.8  92.9\n#&gt; 290      6   0.2  93.1\n#&gt; 292     16   0.5  93.6\n#&gt; 300     17   0.5  94.1\n#&gt; 330    114   3.4  97.5\n#&gt; 375      1   0.0  97.5\n#&gt; 377     14   0.4  98.0\n#&gt; 379     55   1.7  99.6\n#&gt; 400     12   0.4 100.0\n#&gt; 450      1   0.0 100.0\n#&gt; Total 3322 100.0 100.0\n\nComme nous pouvons le constater, le tableau est très grand car la variable seats possède 48 valeurs différentes.\n\n\n1.1.3 Les variables quantitatives continues\nLe tableau de fréquences que nous utiliserons est le suivant :\n\n\n\n\n\n\n\n\n\nTitre\n\n\n\n\n\n\n\nNom de la variable\nNombre d’unités statistiques\nPourcentage d’unités statistiques (%)\nPourcentage cumulé\n\n\n(Classes)\n(Fréquences absolues)\n(Fréquences relatives)\n(Fréquences relatives cumulées)\n\n\nTotal\nn\n100%\n\n\n\n\nPour être en mesure de briser une variable en classes, il faut utiliser la commande cut.\nLes options de cut sont:\n\ninclude.lowest = TRUE qui permet d’avoir un intervalle fermé à droite et ouvert à gauche;\nbreaks qui permet d’indiquer à quel endroit on doit créer les classes;\nseq(from = A, to = B, by = C) permet de créer un vecteur comportant les valeurs de A jusqu’à B en faisant des bonds de C.\n\nPour simplifier le code, nous créons en premier lieu une variable air_time_rec avec les classes et nous l’affichons ensuite avec freq. Remarquons que nous avons ajouté l’option valid = TRUE car certaines valeurs sont manquantes. Rappelons que les données manquantes sont représentées par NA en R. Deux colonnes sont ajoutées:\n\nval%: le pourcentage en omettant les valeurs manquantes\nval%cum: le pourcentage cumulé en omettant les valeurs manquantes\n\nNous obtenons donc:\n\nair_time_rec &lt;- cut(flights$air_time, \n                    right=FALSE,\n                    breaks=seq(from = 0, to = 700, by = 100))\nfreq(air_time_rec,cum = TRUE,total = TRUE,valid = TRUE)\n#&gt;                n     %  val%  %cum val%cum\n#&gt; [0,100)   105687  31.4  32.3  31.4    32.3\n#&gt; [100,200) 146527  43.5  44.8  74.9    77.0\n#&gt; [200,300)  31036   9.2   9.5  84.1    86.5\n#&gt; [300,400)  43347  12.9  13.2  97.0    99.8\n#&gt; [400,500)     48   0.0   0.0  97.0    99.8\n#&gt; [500,600)    132   0.0   0.0  97.0    99.8\n#&gt; [600,700)    569   0.2   0.2  97.2   100.0\n#&gt; NA          9430   2.8    NA 100.0      NA\n#&gt; Total     336776 100.0 100.0 100.0   100.0",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les tableaux</span>"
    ]
  },
  {
    "objectID": "tableaux.html#tableau-de-fréquences-à-deux-variables",
    "href": "tableaux.html#tableau-de-fréquences-à-deux-variables",
    "title": "1  Les tableaux",
    "section": "1.2 Tableau de fréquences à deux variables",
    "text": "1.2 Tableau de fréquences à deux variables\nFaire une analyse bivariée, c’est étudier la relation entre deux variables : sont-elles liées ? les valeurs de l’une influencent-elles les valeurs de l’autre ? ou sont-elles au contraire indépendantes ?\nÀ noter qu’on va parler ici d’influence ou de lien, mais pas de relation de cause à effet. Les outils présentés permettent de visualiser ou de déterminer une relation, mais la mise en évidence de liens de causalité proprement dit est nettement plus complexe : il faut en effet vérifier que c’est bien telle variable qui influence telle autre et pas l’inverse, qu’il n’y a pas de “variable cachée”, etc.\nLà encore, le type d’analyse ou de visualisation est déterminé par la nature qualitative ou quantitative des deux variables.\n\n1.2.1 Croisement de deux variables qualitatives\nOn continue à travailler avec le jeu de données tiré de l’enquête Histoire de vie inclus dans l’extension questionr. On commence donc par charger l’extension, le jeu de données, et à le renommer en un nom plus court pour gagner un peu de temps de saisie au clavier.\n\nlibrary(questionr)\ndata(hdv2003)\nd &lt;- hdv2003\n\nQuand on veut croiser deux variables qualitatives, on fait un tableau croisé. Comme pour un tri à plat ceci s’obtient avec la fonction table de R, mais à laquelle on passe cette fois deux variables en argument. Par exemple, si on veut croiser la catégorie socio-professionnelle et le sexe des enquêtés :\n\ntable(d$qualif, d$sexe)\n#&gt;                           \n#&gt;                            Homme Femme\n#&gt;   Ouvrier specialise          96   107\n#&gt;   Ouvrier qualifie           229    63\n#&gt;   Technicien                  66    20\n#&gt;   Profession intermediaire    88    72\n#&gt;   Cadre                      145   115\n#&gt;   Employe                     96   498\n#&gt;   Autre                       21    37\n\nPour pouvoir interpréter ce tableau on doit passer du tableau en effectifs au tableau en pourcentages ligne ou colonne. Pour cela, on peut utiliser les fonctions lprop et cprop de l’extension questionr, qu’on applique au tableau croisé précédent.\nPour calculer les pourcentages ligne :\n\ntab &lt;- table(d$qualif, d$sexe)\nlprop(tab)\n#&gt;                           \n#&gt;                            Homme Femme Total\n#&gt;   Ouvrier specialise        47.3  52.7 100.0\n#&gt;   Ouvrier qualifie          78.4  21.6 100.0\n#&gt;   Technicien                76.7  23.3 100.0\n#&gt;   Profession intermediaire  55.0  45.0 100.0\n#&gt;   Cadre                     55.8  44.2 100.0\n#&gt;   Employe                   16.2  83.8 100.0\n#&gt;   Autre                     36.2  63.8 100.0\n#&gt;   All                       44.8  55.2 100.0\n\nEt pour les pourcentages colonne :\n\ncprop(tab)\n#&gt;                           \n#&gt;                            Homme Femme All  \n#&gt;   Ouvrier specialise        13.0  11.7  12.3\n#&gt;   Ouvrier qualifie          30.9   6.9  17.7\n#&gt;   Technicien                 8.9   2.2   5.2\n#&gt;   Profession intermediaire  11.9   7.9   9.7\n#&gt;   Cadre                     19.6  12.6  15.7\n#&gt;   Employe                   13.0  54.6  35.9\n#&gt;   Autre                      2.8   4.1   3.5\n#&gt;   Total                    100.0 100.0 100.0",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les tableaux</span>"
    ]
  },
  {
    "objectID": "tableaux.html#croisement-de-deux-variables-qualitatives",
    "href": "tableaux.html#croisement-de-deux-variables-qualitatives",
    "title": "1  Les tableaux",
    "section": "1.3 Croisement de deux variables qualitatives",
    "text": "1.3 Croisement de deux variables qualitatives\n\n1.3.1 Tableaux croisés\nOn continue à travailler avec le jeu de données tiré de l’enquête Histoire de vie inclus dans l’extension questionr. On commence donc par charger l’extension, le jeu de données, et à le renommer en un nom plus court pour gagner un peu de temps de saisie au clavier.\n\nlibrary(questionr)\ndata(hdv2003)\nd &lt;- hdv2003\n\nQuand on veut croiser deux variables qualitatives, on fait un tableau croisé. Comme pour un tri à plat ceci s’obtient avec la fonction table de R, mais à laquelle on passe cette fois deux variables en argument. Par exemple, si on veut croiser la catégorie socio-professionnelle et le sexe des enquêtés :\n\ntable(d$qualif, d$sexe)\n#&gt;                           \n#&gt;                            Homme Femme\n#&gt;   Ouvrier specialise          96   107\n#&gt;   Ouvrier qualifie           229    63\n#&gt;   Technicien                  66    20\n#&gt;   Profession intermediaire    88    72\n#&gt;   Cadre                      145   115\n#&gt;   Employe                     96   498\n#&gt;   Autre                       21    37\n\nPour pouvoir interpréter ce tableau on doit passer du tableau en effectifs au tableau en pourcentages ligne ou colonne. Pour cela, on peut utiliser les fonctions lprop et cprop de l’extension questionr, qu’on applique au tableau croisé précédent.\nPour calculer les pourcentages ligne :\n\ntab &lt;- table(d$qualif, d$sexe)\nlprop(tab)\n#&gt;                           \n#&gt;                            Homme Femme Total\n#&gt;   Ouvrier specialise        47.3  52.7 100.0\n#&gt;   Ouvrier qualifie          78.4  21.6 100.0\n#&gt;   Technicien                76.7  23.3 100.0\n#&gt;   Profession intermediaire  55.0  45.0 100.0\n#&gt;   Cadre                     55.8  44.2 100.0\n#&gt;   Employe                   16.2  83.8 100.0\n#&gt;   Autre                     36.2  63.8 100.0\n#&gt;   All                       44.8  55.2 100.0\n\nEt pour les pourcentages colonne :\n\ncprop(tab)\n#&gt;                           \n#&gt;                            Homme Femme All  \n#&gt;   Ouvrier specialise        13.0  11.7  12.3\n#&gt;   Ouvrier qualifie          30.9   6.9  17.7\n#&gt;   Technicien                 8.9   2.2   5.2\n#&gt;   Profession intermediaire  11.9   7.9   9.7\n#&gt;   Cadre                     19.6  12.6  15.7\n#&gt;   Employe                   13.0  54.6  35.9\n#&gt;   Autre                      2.8   4.1   3.5\n#&gt;   Total                    100.0 100.0 100.0\n\n\n\n\n\n\n\nNote\n\n\n\nPour savoir si on doit faire des pourcentages ligne ou colonne, on pourra se référer à l’article suivant :\nhttps://alain-leger.lescigales.org/textes/lignecolonne.pdf\nEn résumé, quand on fait un tableau croisé, celui-ci est parfaitement symétrique : on peut inverser les lignes et les colonnes, ça ne change pas son interprétation. Par contre, on a toujours en tête un “sens” de lecture dans le sens où on considère que l’une des variables dépend de l’autre. Par exemple, si on croise sexe et type de profession, on dira que le type de profession dépend du sexe, et non l’inverse : le type de profession est alors la variable dépendante (à expliquer), et le sexe la variable indépendante (explicative).\nPour faciliter la lecture d’un tableau croisé, il est recommandé de faire les pourcentages sur la variable indépendante. Dans notre exemple, la variable indépendante est le sexe, elle est en colonne, on calcule donc les pourcentages colonnes qui permettent de comparer directement, pour chaque sexe, la répartition des catégories socio-professionnelles.",
    "crumbs": [
      "Les tableaux",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Les tableaux</span>"
    ]
  },
  {
    "objectID": "mesures.html",
    "href": "mesures.html",
    "title": "3  Les mesures",
    "section": "",
    "text": "3.1 Les mesures de tendance centrale",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les mesures</span>"
    ]
  },
  {
    "objectID": "mesures.html#les-mesures-de-tendance-centrale",
    "href": "mesures.html#les-mesures-de-tendance-centrale",
    "title": "3  Les mesures",
    "section": "",
    "text": "3.1.1 Le mode\nLe mode est la modalité, valeur ou classe possédant la plus grande fréquence. En d’autres mots, c’est la donnée la plus fréquente.\nPuisque le mode se préoccupe seulement de la donnée la plus fréquente, il n’est pas influencé par les valeurs extrêmes.\nLorsque le mode est une classe, il est appelé classe modale.\nLe mode est noté Mo.\nLe langage R ne possède pas de fonction permettant de calculer le mode. La façon la plus simple de le calculer est d’utiliser la fonction table de R.\nPar exemple, si nous voulons connaître le mode de la variable marital de la base de données gss_cat:\n\ntable(gss_cat$marital)\n#&gt; \n#&gt;     No answer Never married     Separated      Divorced       Widowed \n#&gt;            17          5416           743          3383          1807 \n#&gt;       Married \n#&gt;         10117\n\nNous remarquons que le maximum est à la modalité Married avec une fréquence de 10117.\nSi nous nous intéressons au mode d’une variable quantitative discrète comme age de la base de données gss_cat nous obtenons:\n\ntable(gss_cat$age)\n#&gt; \n#&gt;  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37 \n#&gt;  91 249 251 278 298 361 344 396 400 385 387 376 433 407 445 425 425 417 428 438 \n#&gt;  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57 \n#&gt; 426 415 452 434 405 448 432 404 422 435 424 417 430 390 400 396 387 365 384 321 \n#&gt;  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77 \n#&gt; 326 323 338 307 310 292 253 259 231 271 205 201 213 206 189 152 180 179 171 137 \n#&gt;  78  79  80  81  82  83  84  85  86  87  88  89 \n#&gt; 150 135 127 119 105  99 100  75  74  54  57 148\n\nNous remarquons que le maximum est à la valeur 40 avec une fréquence de 452.\nDans le cas d’une variable quantitative continue, pour calculer le mode, il faut commencer par séparer les données en classes. Nous utiliserons les mêmes classes utilisées à la section:\n\ncarat_class = cut(diamonds$carat,\n                  breaks = seq(from = 0, to = 6, by = 1),\n                  right = FALSE)\ntable(carat_class)\n#&gt; carat_class\n#&gt; [0,1) [1,2) [2,3) [3,4) [4,5) [5,6) \n#&gt; 34880 16906  2114    34     5     1\n\nLa classe modale est donc la classe [0,1) avec une fréquence de 34880.\n\n\n3.1.2 La médiane\nLa médiane, notée Md, est la valeur qui sépare une série de données classée en ordre croissant en deux parties égales.\nLa médiane étant la valeur du milieu, elle est la valeur où le pourcentage cumulé atteint 50%.\nPuisque la médiane se préoccupe seulement de déterminer où se situe le centre des données, elle n’est pas influencée par les valeurs extrêmes. Elle est donc une mesure de tendance centrale plus fiable que la moyenne.\n\nImportant : La médiane n’est définie que pour les variables quantitatives. En effet, si vous tentez d’utiliser la médiane pour des données autres que numériques, R vous donnera un message d’erreur.\n\nLa fonction median permet de calculer la médiane en langage R.\nPar exemple, pour calculer la médiane de la variable carat de la base de données diamonds, nous avons:\n\nmedian(diamonds$carat)\n#&gt; [1] 0.7\n\nCeci signifie que 50% des diamants ont une valeur en carat inférieure ou égale à 0.7 et que 50% des diamants ont une valeur en carat supérieure ou égale à 0.7.\nNous pouvons aussi obtenir que la médiane de la variable price de la base de données diamonds est donnée par:\n\nmedian(diamonds$price)\n#&gt; [1] 2401\n\n\n\n3.1.3 La moyenne\nLa moyenne est la valeur qui pourrait remplacer chacune des données d’une série pour que leur somme demeure identique. Intuitivement, elle représente le centre d’équilibre d’une série de données. La somme des distances qui sépare les données plus petites que la moyenne devrait être la même que la somme des distances qui sépare les données plus grandes.\n\nImportant : La moyenne n’est définie que pour les variables quantitatives. En effet, si vous tentez d’utiliser la moyenne pour des données autres que numériques, R vous donnera un message d’erreur.\n\nLa fonction mean permet de calculer la moyenne en langage R.\nPar exemple, pour calculer la moyenne de la variable carat de la base de données diamonds, nous avons:\n\nmean(diamonds$carat)\n#&gt; [1] 0.7979397\n\nNous pouvons aussi obtenir que la moyenne de la variable price de la base de données diamonds est donnée par:\n\nmean(diamonds$price)\n#&gt; [1] 3932.8",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les mesures</span>"
    ]
  },
  {
    "objectID": "mesures.html#les-mesures-de-dispersion",
    "href": "mesures.html#les-mesures-de-dispersion",
    "title": "3  Les mesures",
    "section": "3.2 Les mesures de dispersion",
    "text": "3.2 Les mesures de dispersion\nLes mesures de tendance centrale (mode, moyenne et médiane) ne permettent pas de déterminer si une série de données est principalement située autour de son centre, ou si au contraire elle est très dispersée.\nLes mesures de dispersion, elles, permettent de déterminer si une série de données est centralisée autour de sa moyenne, ou si elle est au contraire très dispersée.\nLes mesures de dispersion sont l’étendue, la variance, l’écart-type et le coefficient de variation.\n\n3.2.1 L’étendue\nLa première mesure de dispersion, l’étendue, est la différence entre la valeur maximale et la valeur minimale.\nL’étendue ne tenant compte que du maximum et du minimum, elle est grandement influencée par les valeurs extrêmes. Elle est donc une mesure de dispersion peu fiable.\nLa fonction range permet de calculer l’étendue d’une variable en langage R.\nPar exemple, pour calculer l’étendue de la variable carat de la base de données diamonds, nous avons:\n\nrange(diamonds$carat)\n#&gt; [1] 0.20 5.01\n\nNous pouvons donc calculer l’étendue de la variable carat en soustrayant les deux valeurs obtenues par la fonction range, c’est-à-dire que l’étendue est 5.01-0.2 = 4.81.\n\n\n3.2.2 La variance\nLa variance sert principalement à calculer l’écart-type, la mesure de dispersion la plus connue.\n\nAttention : Les unités de la variance sont des unités2.\n\nLa fonction var permet de calculer la variance d’une variable en langage R.\nPar exemple, pour calculer la variance de la variable carat de la base de données diamonds, nous avons:\n\nvar(diamonds$carat)\n#&gt; [1] 0.2246867\n\nCeci signifie que la variance de la variable carat est 0.2246867 carat2.\n\n\n3.2.3 L’écart-type\nL’écart-type est la mesure de dispersion la plus couramment utilisée. Il peut être vu comme la « moyenne » des écarts entre les données et la moyenne.\nPuisque l’écart-type tient compte de chacune des données, il est une mesure de dispersion beaucoup plus fiable que l’étendue.\nIl est défini comme la racine carrée de la variance.\nLa fonction sd permet de calculer l’’écart-type d’une variable en langage R.\nPar exemple, pour calculer l’écart-type de la variable carat de la base de données diamonds, nous avons:\n\nsd(diamonds$carat)\n#&gt; [1] 0.4740112\n\nCeci signifie que l’écart-type de la variable carat est 0.4740112 carat.\n\n\n3.2.4 Le coefficient de variation\nLe coefficient de variation, noté C. V., est calculé comme suit :\n\\[\\begin{equation}\nC.V. = \\dfrac{\\text{ecart-type}}{\\text{moyenne}}\\times 100\\%\n\\end{equation}\\]\nSi le coefficient est inférieur à 15%, les données sont dites homogènes. Cela veut dire que les données sont situées près les unes des autres.\nDans le cas contraire, les données sont dites hétérogènes. Cela veut dire que les données sont très dispersées.\n\nImportant : Le coefficient de variation ne possède pas d’unité, outre le symbole de pourcentage.\n\nIl n’existe pas de fonctions en R permettant de calculer directement le coefficient de variation. Par contre, nous pouvons utiliser en conjonction les fonctions sd et mean pour le calculer.\nPar exemple, pour calculer le coefficient de variation de la variable carat de la base de données diamonds, nous avons:\n\nsd(diamonds$carat)/mean(diamonds$carat)*100\n#&gt; [1] 59.40439\n\nLe C.V. de la variable carat est donc 59.4043906 %, ce qui signifie que les données sont hétérogènes, car le coefficient de variation est plus grand que 15%.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les mesures</span>"
    ]
  },
  {
    "objectID": "mesures.html#les-mesures-de-position",
    "href": "mesures.html#les-mesures-de-position",
    "title": "3  Les mesures",
    "section": "3.3 Les mesures de position",
    "text": "3.3 Les mesures de position\nLes mesures de position permettent de situer une donnée par rapport aux autres. Les différentes mesures de position sont la cote Z, les quantiles et les rangs.\nTout comme les mesures de dispersion, celles-ci ne sont définies que pour une variable quantitative.\n\n3.3.1 La cote z\nCette mesure de position se base sur la moyenne et l’écart-type.\nLa cote Z d’une donnée x est calculée comme suit :\n\\[\\begin{equation}\nZ = \\dfrac{x-\\text{moyenne}}{\\text{ecart-type}}\n\\end{equation}\\]\n\nImportant : La cote z ne possède pas d’unités.\n\nUne cote Z peut être positive, négative ou nulle.\n\n\n\nCote Z\nInterprétation\n\n\n\n\nZ&gt;0\ndonnée supérieure à la moyenne\n\n\nZ&lt;0\ndonnée inférieure à la moyenne\n\n\nZ=0\ndonnée égale à la moyenne\n\n\n\nIl n’existe pas de fonctions en R permettant de calculer directement la cote Z. Par contre, nous pouvons utiliser en conjonction les fonctions sd et mean pour la calculer.\nPar exemple, si nous voulons calculer la cote Z d’un diamant de 3 carats, nous avons:\n\n(3-mean(diamonds$carat))/sd(diamonds$carat)\n#&gt; [1] 4.645587\n\n\n\n3.3.2 Les quantiles\nUn quantile est une donnée qui correspond à un certain pourcentage cumulé.\nParmi les quantiles, on distingue les quartiles, les quintiles, les déciles et les centiles.\n\nLes quartiles Q1, Q2 et Q3, séparent les données en quatre parties égales. Environ 25% des données sont inférieures ou égales à Q1. Environ 50% des données sont inférieures ou égales à Q2. Environ 75% des données sont inférieures ou égales à Q3.\nLes quintiles V1, V2, V3 et V4, séparent les données en cinq parties égales. Environ 20% des données sont inférieures ou égales à V1. Environ 40% des données sont inférieures ou égales à V2. Etc.\nLes déciles D1, D2, …, D8 et D9, séparent les données en dix parties égales. Environ 10% des données sont inférieures ou égales à D1. Environ 20% des données sont inférieures ou égales à D2. Etc.\nLes centiles C1, C2, …, C98 et C99, séparent les données en cent parties égales. Environ 1% des données sont inférieures ou égales à C1. Environ 2% des données sont inférieures ou égales à C2. Etc.\n\n\nIl est utile de noter que certains quantiles se recoupent.\n\nLa fonction quantile permet de calculer n’importe quel quantile d’une variable en langage R. Il suffit d’indiquer la variable étudiée ainsi que le pourcentage du quantile voulu.\nPar exemple, si nous voulons calculer D1 pour la variable carat, nous allons utiliser la fonction quantile avec une probabilité de 0,1.\n\nquantile(diamonds$carat, 0.1)\n#&gt;  10% \n#&gt; 0.31\n\nCeci implique que 10% des diamants ont une valeur en carat inférieure ou égale à 0.31 carat.\nNous pouvons calculer le troisième quartile Q3 de la variable price en utilisant la fonction quantile avec une probabilité de 0,75.\n\nquantile(diamonds$price, 0.75)\n#&gt;     75% \n#&gt; 5324.25\n\nCeci implique que 75% des diamants ont un prix en dollars inférieur ou égal à 5324.25 $.\n\n\n3.3.3 La commande summary\nLa commande summary produit un sommaire contenant six mesures importantes:\n\nMin : le minimum de la variable\n1st Qu.: Le premier quartile, Q1, de la variable\nMedian : La médiane de la variable\nMean : La moyenne de la variable\n3rd Qu. : Le troisième quartile, Q3, de la variable\nMax : Le maximum de la variable\n\nNous pouvons donc produire le sommaire de la variable price de la base de données diamonds de la façon suivante:\n\nsummary(diamonds$price)\n#&gt;    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#&gt;     326     950    2401    3933    5324   18823\n\n\n\n3.3.4 Le rang centile\nUn rang centile représente le pourcentage cumulé, exprimé en nombre entier, qui correspond à une certaine donnée. Nous déterminerons les rangs centiles pour les variables continues seulement.\nLes rangs centiles sont donc exactement l’inverse des centiles.\nIl n’existe pas de fonctions dans R permettant de trouver directement le rang centile, mais il est facile d’utiliser la fonction mean pour le trouver.\nPar exemple, si nous voulons trouver le rang centile d’un diamant qui coûte 500$, il suffit d’utiliser la commande suivante. La commande calcule la moyenne de toutes les valeurs en dollars des diamants coûtant 500$ ou moins.\n\nfloor(mean(diamonds$price&lt;=500)*100)\n#&gt; [1] 3\n\nCeci signifie que pour un diamant de 500$, il y a 3 % des diamants qui ont une valeur égale ou inférieure.",
    "crumbs": [
      "Les différentes mesures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Les mesures</span>"
    ]
  }
]